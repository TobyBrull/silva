[
  vector: stem [ T: type ; S: ptrdiff; S_default: 0 ] -> type [
    retval = [
      _data: T* ;
      _size: size_t ;
      _capa: size_t ;

      push_back: stem this: *self [
      ]

      empty?: stem this: *self -> bool [
      ]
    ]
  ]

  _test_vector: stem [
    v = create (vector f64) ;
    v.emplace_back 3.14 ;
    check v.size() == 1 ;
  ]

  array: stem [ T: type ; I: size ] -> type [
    retval = []
    for [int i = 0; i < I; i += 1] [
      type.append(retval, T)
    ]
  ]

  sort_gen = stem type: Iter -> stem [
    value_type = iter_deref_type Iter
    retval = stem [ Iter: begin Iter: end (stem value_type value_type -> value_type): comparator ] [
      # ...
    ]
  ]

  sort = stem expr: range expr: comparator = std.lt [
    tt = type range
    sort_impl = sort_gen (iter_type tt)
    result = evaluate range
    sort_iter std.iter_begin result std.iter_end result comparator
  ]

  test_sort = stem [
    vv = vector i32
    dd = deque i32

    sort vv
    sort dd std.gt
  ]

  div = stem type -> stem [
    retval = stem [ T T ] -> [ T T ] [
      retval[0] = arg.0 / arg.1
      retval[1] = arg.0 % arg.1
    ]
    retval = stem [ T: divident T: divisor ] -> [ T: quotient T: rest ] [
      quotient = divident / divisor
      rest = divident % divisor
    ]
  ]

  enum: stem type -> type

  unique_ptr: stem type -> type [
    retval = [
      T* ptr
    ]
  ]

  json_value = enum [
    number: f64
    string: std.string
    boolean: bool
    array: std.vector dyn_value
    object: std.hashmap std.string dyn_value
    none: []
  ]

  error_invalid_argument = []

  error_handling_sqrt = stem x:f64 [
      -> retval:f64
      => negative_x:error_invalid_argument
    if x >= 0 [
      retval = system.sqrt(x)
    ]
    else [
      negative_x = []
    ]
  ]
]
