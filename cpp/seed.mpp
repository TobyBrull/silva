#include "seed.hpp"

#include "canopy/expected.hpp"
#include "canopy/main.hpp"
#include "parse_root.hpp"

using namespace silva;

expected_t<void>
silva_main(span_t<string_view_t> cmdline_args)
{
  const index_t m = cmdline_args.size();
  SILVA_EXPECT(2 <= m && m <= 3, MINOR, "Usage: ... <seed-file> [<target-file>]");

  const auto seed_filename = cmdline_args[1];
  const tokenization_t seed_tokenization =
      SILVA_EXPECT_FWD(tokenize(SILVA_EXPECT_FWD(source_code_t::load(seed_filename))));
  const parse_tree_t seed_pt = SILVA_EXPECT_FWD(seed_parse(const_ptr_unowned(&seed_tokenization)));
  if (m == 2) {
    fmt::print("{}\n", SILVA_EXPECT_FWD(parse_tree_to_string(seed_pt)));
  }
  else if (m == 3) {
    const auto tgt_filename = cmdline_args[2];
    const parse_root_t pr   = SILVA_EXPECT_FWD(parse_root_t::create(const_ptr_unowned(&seed_pt)));

    const tokenization_t tgt_tokenization =
        SILVA_EXPECT_FWD(tokenize(SILVA_EXPECT_FWD(source_code_t::load(tgt_filename))));
    const parse_tree_t tgt_pt = SILVA_EXPECT_FWD(pr.apply(const_ptr_unowned(&tgt_tokenization)));
    fmt::print("{}\n", SILVA_EXPECT_FWD(parse_tree_to_string(tgt_pt)));
  }
  return {};
}
SILVA_MAIN_1(silva_main);
