#include "bytecode_compiler.hpp"
#include "bytecode_vm.hpp"
#include "interpreter.hpp"
#include "lox.hpp"

#include "canopy/main.hpp"
#include "canopy/var_context.hpp"
#include "syntax/syntax.hpp"

namespace silva::lox {
  expected_t<void> main(const span_t<string_view_t> cmdline_args)
  {
    const index_t m = cmdline_args.size();
    SILVA_EXPECT(2 == m, MINOR, "Usage: ... <lox-file>");

    const bool use_interpreter =
        SILVA_EXPECT_FWD_IF(var_context_get_as<bool>("use-interpreter"), MAJOR).value_or(false);

    constexpr expected_traits_t expected_traits{.materialize_fwd = true};
    syntax_ward_t sw;
    auto si               = seed_interpreter(sw.ptr());
    tokenization_ptr_t tp = SILVA_EXPECT_FWD(tokenize_load(sw.ptr(), cmdline_args[1]));
    parse_tree_ptr_t pt   = SILVA_EXPECT_FWD(si->apply(tp, sw.name_id_of("Lox")),
                                           "error parsing Lox file {}",
                                           cmdline_args[1]);

    const bool verbose =
        SILVA_EXPECT_FWD_IF(var_context_get_as<bool>("VERBOSE"), MAJOR).value_or(false);
    if (verbose) {
      const string_t pts = SILVA_EXPECT_FWD(pt->span().to_string());
      fmt::print("{}\n", pts);
    }

    byte_sink_stdout_t _stdout;

    if (use_interpreter) {
      interpreter_t li{sw.ptr(), &_stdout};
      SILVA_EXPECT_FWD(li.load_builtins(as_parser(si.get())));
      SILVA_EXPECT_FWD(li.resolve(pt->span()));
      {
        auto scope = li.scopes.root();
        SILVA_EXPECT_FWD(li.execute(pt->span(), scope),
                         "failed executing Lox script {}",
                         cmdline_args[1]);
      }
      if (verbose) {
        fmt::println("{}", li.object_pool.to_string());
      }
    }
    else {
      using namespace silva::lox::bytecode;
      object_pool_t object_pool;
      compiler_t compiler = {sw.ptr(), &object_pool};
      vm_t vm{sw.ptr(), &object_pool, &_stdout};
      auto chunk = SILVA_EXPECT_FWD(compiler.compile(pt->span()));
      SILVA_EXPECT_FWD(vm.run(*chunk));
    }
    return {};
  }
}
SILVA_MAIN(silva::lox::main);
