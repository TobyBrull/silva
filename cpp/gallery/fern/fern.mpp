#include "fern.hpp"

#include "canopy/filesystem.hpp"
#include "canopy/main.hpp"
#include "canopy/var_context.hpp"

#include "syntax/syntax.hpp"

namespace silva {
  expected_t<void> fern_main(const span_t<string_view_t> cmdline_args)
  {
    const index_t m = cmdline_args.size();
    SILVA_EXPECT(2 <= m, MINOR, "Usage: ... <fern-file> [...keyword args...]");

    const auto arg_process =
        SILVA_EXPECT_FWD_IF(var_context_get("process"), MAJOR).value_or("direct/string");
    const bool arg_seed_eng =
        SILVA_EXPECT_FWD_IF(var_context_get_as<bool>("seed-engine"), MAJOR).value_or(true);

    expected_traits_t expected_traits{.materialize_fwd = true};
    syntax_ward_t sw;
    tokenization_ptr_t tp = SILVA_EXPECT_FWD(tokenize_load(sw.ptr(), cmdline_args[1]));
    parse_tree_ptr_t ptp;
    if (arg_seed_eng) {
      const auto fse{standard_seed_engine(sw.ptr())};
      ptp = SILVA_EXPECT_FWD(fse->apply(tp, sw.name_id_of("Fern")), "error parsing Fern");
    }
    else {
      ptp = SILVA_EXPECT_FWD(fern_parse(tp), "error parsing Fern");
    }

    if (arg_process == "none") {
      ;
    }
    else if (arg_process.starts_with("fern_t/")) {
      const auto rest   = arg_process.substr(7);
      const fern_t fern = SILVA_EXPECT_FWD(fern_create(ptp.get()));
      if (rest == "string") {
        fmt::print("{}\n", fern.to_string());
      }
      else if (rest == "graphviz") {
        fmt::print("{}\n", fern.to_graphviz());
      }
      else if (rest == "graphviz_show") {
        graphviz_show_sync(fern.to_graphviz());
      }
      else {
        SILVA_EXPECT(false, MAJOR, "process={} is invalid", arg_process);
      }
    }
    else if (arg_process.starts_with("direct/")) {
      const auto rest = arg_process.substr(7);
      if (rest == "string") {
        fmt::print("{}\n", SILVA_EXPECT_FWD(fern_to_string(ptp.get())));
      }
      else if (rest == "graphviz") {
        fmt::print("{}\n", SILVA_EXPECT_FWD(fern_to_graphviz(ptp.get())));
      }
      else if (rest == "graphviz_show") {
        graphviz_show_sync(SILVA_EXPECT_FWD(fern_to_graphviz(ptp.get())));
      }
      else {
        SILVA_EXPECT(false, MAJOR, "process={} is invalid", arg_process);
      }
    }
    else if (arg_process.starts_with("parse_tree/")) {
      const auto rest = arg_process.substr(11);
      if (rest == "string") {
        fmt::print("{}\n", SILVA_EXPECT_FWD(ptp->span().to_string()));
      }
      else if (rest == "graphviz") {
        fmt::print("{}\n", SILVA_EXPECT_FWD(ptp->span().to_graphviz()));
      }
      else if (rest == "graphviz_show") {
        graphviz_show_sync(SILVA_EXPECT_FWD(ptp->span().to_graphviz()));
      }
      else {
        SILVA_EXPECT(false, MAJOR, "process={} is invalid", arg_process);
      }
    }
    else {
      SILVA_EXPECT(false, MAJOR, "process={} is invalid", arg_process);
    }

    return {};
  }
}
SILVA_MAIN(silva::fern_main);
