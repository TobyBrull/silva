#include "seed.hpp"

#include "canopy/expected.hpp"
#include "canopy/main.hpp"
#include "seed_engine.hpp"
#include "syntax_catalog.hpp"

namespace silva {
  expected_t<void> seed_main(const span_t<string_view_t> cmdline_args)
  {
    const index_t m = cmdline_args.size();
    SILVA_EXPECT(2 <= m && m <= 3, MINOR, "Usage: ... <seed-file> [<target-file>]");

    expected_traits_t expected_traits{.materialize_fwd = true};
    syntax_catalog_t sc;
    auto seed_tt = SILVA_EXPECT_FWD(tokenize_load(sc, cmdline_args[1]));
    auto seed_pt = SILVA_EXPECT_FWD(seed_parse(sc, std::move(seed_tt)));
    seed_engine_t se(sc.ptr());
    SILVA_EXPECT_FWD(se.add(seed_pt->span()));
    if (m == 2) {
      fmt::print("{}\n", SILVA_EXPECT_FWD(seed_pt->span().to_string()));
    }
    else if (m == 3) {
      auto tgt_tt = SILVA_EXPECT_FWD(tokenize_load(sc, cmdline_args[2]));
      auto tgt_pt = SILVA_EXPECT_FWD(se.apply(sc, std::move(tgt_tt), sc.name_id_of("Test")));
      fmt::print("{}\n", SILVA_EXPECT_FWD(tgt_pt->span().to_string()));
    }
    return {};
  }
}
SILVA_MAIN(silva::seed_main);
