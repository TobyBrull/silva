#include "seed.hpp"

#include "canopy/expected.hpp"
#include "canopy/main.hpp"
#include "seed_engine.hpp"

using namespace silva;

expected_t<void>
silva_main(span_t<string_view_t> cmdline_args)
{
  syntax_context_t tc;
  const index_t m = cmdline_args.size();
  SILVA_EXPECT(2 <= m && m <= 3, MINOR, "Usage: ... <seed-file> [<target-file>]");
  auto seed_tt = SILVA_EXPECT_FWD(tokenize_load(tc.ptr(), cmdline_args[1]));
  auto seed_pt = SILVA_EXPECT_FWD(seed_parse(std::move(seed_tt)));
  if (m == 2) {
    fmt::print("{}\n", SILVA_EXPECT_FWD(seed_pt->span().to_string()));
  }
  else if (m == 3) {
    auto pr     = SILVA_EXPECT_FWD(seed_engine_t::create(std::move(seed_pt)));
    auto tgt_tt = SILVA_EXPECT_FWD(tokenize_load(tc.ptr(), cmdline_args[2]));
    auto tgt_pt = SILVA_EXPECT_FWD(pr->apply(std::move(tgt_tt), tc.name_id_of("Test")));
    fmt::print("{}\n", SILVA_EXPECT_FWD(tgt_pt->span().to_string()));
  }
  return {};
}
SILVA_MAIN_1(silva_main);
