[
  import std ;
  import regex ;

  std.print "Hello, Stem";

  main: stem [
    v: (std.vector f32).create() ;
    v.push_back 3.14 ;

    a: pointer (mutable int) = nullptr

    if x .<. 0 [
      std.print "Goodbye [x]"
    ]
    else if x .>. 0 [
      std.print "Hello [x]"
    ]
    else [
      std.print "Zero"
    ]
  ]

  accumulator: func [ T: type ; op: (func [ T T ] -> T) ; init_val: T ] -> type [
  ]

  acc_sum: func type -> type [
    op = func T: state T: x -> T [ retval = state + x ]
    retval = accumulator T op zero
  ]

  foo: func [ x: i32 ; y: i32 ; z: i32 ] -> i32 [
    a = x + y ;
    b = std.sin x ;
    retval = z / a * b ;
  ] precond,[ 0 .<. x ] postcond,[ retval .<. 0 ]

  test_math_calc: func [ x: i32 ; y: i32 ; z: i32 ] [
    i32 a = std.add x (foo y x) z
    i32 a = std.mul x y z
    auto [ res; rest ] = std.div x y
    a = std.sub x y
    i32 i = 0
    i32 sum = 0
    aa = acc_sum i32
    loop [
      aa.apply i
      sum = sum + i
      i = i + 1
      if i == n [
        break
      ]
    ]
  ]

]
