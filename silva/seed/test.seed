- Precedence = ( Expr ";" )* "end"

- Expr,0 = "A" A_Expr
- Expr,1 = "B" B_Expr

- A_Expr = A_Add
- A_Add = A_Mult ("+" A_Add)*
- A_Mult = A_Primary ("*" A_Mult)*
- A_Primary,0 = "(" A_Expr ")"
- A_Primary,1 = number

- B_Expr =% B_Primary [
    infix_ltr     "." "|"
    prefix        "-" "not" "*"
    infix_ltr     "*" "/"
    infix_ltr     "+" "-"
    infix_ltr     "=="
    postfix_expr  FuncArgs
    infix_ltr     "and"
    infix_ltr     "or"
    infix_rtl     "=:"
    postfix       "!"
    ternary       [ "?" ":" ] [ "falls" "sonst" ]
  ]
- B_Primary,0 = "(" B_Expr ")"
- B_Primary,1 =~ number string

- FuncArgs = "(" B_Expr ( "," B_Expr )* ")"
