- Precedence = ( Expr ";" )* "end"

- Expr,0 = "A" A_Expr
- Expr,1 = "B" B_Expr

- A_Expr = A_Add
- A_Add = A_Mult ("+" A_Add)*
- A_Mult = A_Primary ("*" A_Mult)*
- A_Primary,0 = "(" A_Expr ")"
- A_Primary,1 = number

- B_Expr =% B_Atom primary_nest "(" ")" [
    - Namespace   = ltr   infix "::"
    - Postfix     = ltr   postfix "++" "--" 
                          postfix_nest "(" ")" "[" "]"
                          infix "." "->"
    - Prefix      = rtl   prefix "++" "--" "+" "-" "!" "~" "*" "&" "sizeof" "new"
                          prefix_nest "<." ".>"
    - Member      = ltr   infix ".*" "->*"
    - Multiply    = ltr   infix "*" "/" "%"
    - Addition    = ltr   infix "+" "-"
    - Bitshift    = ltr   infix "<<" ">>"
    - Spaceship   = ltr   infix "<=>"
    - Comparison  = flat  infix "<" "<=" ">" ">="
    - Equality    = ltr   infix "==" "!="
    - BitAnd      = ltr   infix "&"
    - BitXor      = ltr   infix "^"
    - BitOr       = ltr   infix "|"
    - LogicalAnd  = ltr   infix "&&"
    - LogicalOr   = ltr   infix "||"
    - Assignment  = rtl   infix "=" "+=" "-="
                          prefix "throw"
                          ternary "?" ":"
    - Comma       = ltr   infix ","
  ]
- B_Atom =~ number string identifier
