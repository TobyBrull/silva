- Lox = [
  - x = Decl *
  - Decl = [
    - x = Class | Fun | Var | _.Lox.Stmt
    - Class = 'class' identifier ( '<' identifier ) ? '{' _.Lox.Function * '}'
    - Fun = 'fun' _.Lox.Function
    - Var = 'var' identifier ( '=' _.Lox.Expr ) ? ';'
  ]
  - Stmt = [
    - x = ExprStmt | For | If | Print | Return | While | Block
    - ExprStmt = _.Lox.Expr ';'
    - For = 'for' '(' ( _.Lox.Decl.Var | ExprStmt | ';' ) _.Lox.Expr ? ';' _.Lox.Expr ? ')' x
    - If = 'if' '(' _.Lox.Expr ')' x ( 'else' x ) ?
    - Print = 'print' _.Lox.Expr ';'
    - Return = 'return' _.Lox.Expr ? ';'
    - While = 'while' '(' _.Lox.Expr ')' x
    - Block = '{' _.Lox.Decl * '}'
  ]
  - Expr = [
    - x =/ Atom [
      - Primary     = nest atom_nest '(' ')'
      - Unary       = rtl prefix '!' '-'
      - Factor      = ltr infix '/' '*'
      - Term        = ltr infix '-' '+'
      - Comparison  = ltr infix '>' '>=' '<' '<='
      - Equality    = ltr infix '==' '!='
      - LogicAnd    = ltr infix 'and'
      - LogicOr     = ltr infix 'or'
      - Assign      = ltr infix '='
      - Call        = ltr postfix_nest -> Arguments '(' ')' infix '.'
      - Comma       = ltr infix_flat ','
    ]
    - Atom = 'true' | 'false' | 'none' | 'this'
           | number | string | identifier
    - Arguments = Expr ( ',' Expr ) *
  ]
  - Function = [
    - x = identifier '(' Parameters ? ')' _.Lox.Stmt.Block
    - Parameters = identifier ( ',' identifier ) *
  ]
]
