<$ Seed

- Soil = [
  - x = ( Type.Defn | Func.Defn | Variable.Defn ) *
  - Type = [
    - x = Name | Struct
    - Name = identifier / '_t$'
    - Defn = Name '=' x
    - Struct = [
      - x = '[' Member * ']'
      - Member = [
        - x = p.p Label ? Init ? ';'
        - Label = ':' Name
        - Init = '=' _.Soil.Expr
        - Name = identifier
      ]
    ]
  ]
  - Expr = [
    - x = Axe
    - Maybe = x | 'none'
    - Axe =/ Atom [
      - Parens    = nest atom_nest '(' ')'
      - Member    = ltr infix '.'
      - CallPost  = ltr postfix_nest '(' ')'
      - Typing    = ltr infix '::'
      - CallPipe  = ltr infix '|'
      - Mul       = ltr infix '*' '//'
      - Add       = ltr infix '+' '-'
      - Comp      = ltr infix '==' '<=' '<' '>' '>='
      - Logic     = ltr infix 'and' 'or'
      - Assign    = ltr infix '=' '+=' '*='
    ]
    - Atom = Struct | _.Silva.Section
           | not keywords_of _.Soil but_then identifier | string | number
           | 'true' | 'false' | 'none'
    - Struct = [
      - x = '[' LabeledItem * ']'
      - LabeledItem = ( _.Soil.Variable.Name ':' ) ? ( x | p )
    ]
  ]
  - Func = [
    - x = Name
    - Name = identifier / '_f$'
    - Defn = Name '=' Signature Body
    - Signature = p.Type ( '->' p.Type ) ?
    - Body = '{' Stmt * '}'
    - Stmt = [
      - x = If | For | _.Soil.Expr ';'
      - If = [
        - x = 'if' Branch ( 'elif' Branch ) * ( 'else' p.p.Body ) ?
        - Branch = _.Soil.Expr p.p.Body
      ]
      - For = 'for' _.Soil.Expr.Maybe ';' _.Soil.Expr.Maybe ';' _.Soil.Expr.Maybe p.Body
    ]
  ]
  - Variable = [
    - Name = not p.Type.Name but_then not p.Func.Name but_then identifier
    - Defn = Name '=' p.Expr
  ]
]

$>
