<$ Soil

name_t = str_t
age_t = i32_t

person_t = [
  [
    name_t : first;
    name_t : last = 'Trump';
  ] : name = [ 'Arno' 'Nym' ];
  age_t : age = size_f(name.first);
]

bs = person_t :: [ [ 'Bjarne' 'Stroustrup' ] 80 ]

is_adult_f = person_t -> bool_t {
  retval = arg.age >= 18;
}

example_f = [] {
  age = age_t :: 42;
  p1 = person_t :: [ name : [ first : 'Bob' last : 'Bobson' ] age : 20 ];
  p2 = person_t :: [ [ 'Alice' 'Allison' ] 30 ];
  ['{} is-adult = {}' p1 is_adult_f(p1)] | log_f;
  vector_f(person_t) :: [ p1 p2 ] | std.filter_m(arg.age <= 40) | log_f;
  <$ Seed - SomeRule = identifier * $> | print_f;

  if p1.name.first | size_f > 10 {
    'This name is long' | log_f;
  } elif p1.name.first | size_f > 5 {
    'This name it not long' | log_f;
  } else {
    'This name it short' | log_f;
  }

  sum = i64_t :: 0;
  for i = i64_t :: 0; i < n; i += 1 {
    sum += i;
  }

  abc = 42;
  for ; i < n; {
    sum += i;
  }
}

$>
