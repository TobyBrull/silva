[  0]   1:1   [
[  1]   2:3   none
[  2]   3:3   true
[  3]   4:3   42
[  4]   5:3   hello
[  5]   5:9   :
[  6]   5:11  'World'
[  7]   6:3   [
[  8]   6:4   ]
[  9]   7:3   [
[ 10]   8:5   'one'
[ 11]   8:11  :
[ 12]   8:13  1.0
[ 13]   9:5   'two'
[ 14]   9:11  :
[ 15]   9:13  2.0
[ 16]  10:3   ]
[ 17]  11:1   ]

[
  none
  true
  42
  hello : 'World'
  []
  [
    'one' : 1.0
    'two' : 2.0
  ]
]
ERROR (MAJOR):
  ┌─[01-broken.fern:9:3] _.Fern.Label: expected string
  ├─[01-broken.fern:9:3] _.Fern.Label: expected identifier
  [01-broken.fern:9:3] _.Fern.Label: expected alternation[ string | identifier ]
  [01-broken.fern:9:3] _.Fern.Label
┌─[01-broken.fern:9:3] _.Fern.LabeledItem: expected sequence[ Label ':' ]
│     [01-broken.fern:11:5] _.Fern.LabeledItem: expected token[ : ]
│   ┌─[01-broken.fern:10:5] _.Fern.LabeledItem: expected sequence[ Label ':' ]
│   │   [01-broken.fern:10:5] _.Fern: expected token[ [ ]
│   │   [01-broken.fern:10:5] _.Fern: expected sequence[ '[' LabeledItem * ']' ]
│   │ ┌─[01-broken.fern:10:5] _.Fern
│   │ │ ┌─[01-broken.fern:10:5] _.Fern.Value: expected token[ none ]
│   │ │ ├─[01-broken.fern:10:5] _.Fern.Value: expected token[ true ]
│   │ │ ├─[01-broken.fern:10:5] _.Fern.Value: expected token[ false ]
│   │ │ ├─[01-broken.fern:10:5] _.Fern.Value: expected string
│   │ │ ├─[01-broken.fern:10:5] _.Fern.Value: expected number
│   │ │ [01-broken.fern:10:5] _.Fern.Value: expected alternation[ 'none' | ... | number ]
│   │ ├─[01-broken.fern:10:5] _.Fern.Value
│   ├─[01-broken.fern:10:5] _.Fern.LabeledItem: expected alternation[ x | Value ]
│   [01-broken.fern:10:5] _.Fern.LabeledItem: expected sequence[ ( Label ... Value ) ]
│ ┌─[01-broken.fern:10:5] _.Fern.LabeledItem
│ ├─[01-broken.fern:10:5] _.Fern: expected token[ ] ]
│ [01-broken.fern:9:3] _.Fern: expected sequence[ '[' LabeledItem * ']' ]
│ [01-broken.fern:9:3] _.Fern
├─[01-broken.fern:9:3] _.Fern.LabeledItem: expected alternation[ x | Value ]
[01-broken.fern:9:3] _.Fern.LabeledItem: expected sequence[ ( Label ... Value ) ]
[01-broken.fern:9:3] _.Fern.LabeledItem
[01-broken.fern:1:1] _.Fern: expected sequence[ '[' LabeledItem * ']' ]
[01-broken.fern:1:1] _.Fern
seed::interpreter_t::apply(_.Fern) failed to parse
error parsing Fern

[0]_.Fern                                         [ none ... ] ]
  [0]_.Fern.LabeledItem                           none
    [0]_.Fern.Value                               none
  [1]_.Fern.LabeledItem                           [ ]
    [0]_.Fern                                     [ ]
  [2]_.Fern.LabeledItem                           [ none ]
    [0]_.Fern                                     [ none ]
      [0]_.Fern.LabeledItem                       none
        [0]_.Fern.Value                           none

[0]_                                                   false     unknown token_position
  [0]_.Fern                                            true      01-simplest.fern:1:1
    [0]_.Fern.LabeledItem                              true      01-simplest.fern:2:3
      [0]_.Fern.Label                                  true      01-simplest.fern:2:3
      [1]_.Fern                                        false     01-simplest.fern:2:3
      [2]_.Fern.Value                                  true      01-simplest.fern:2:3
    [1]_.Fern.LabeledItem                              true      01-simplest.fern:3:3
      [0]_.Fern.Label                                  false     01-simplest.fern:3:3
      [1]_.Fern                                        true      01-simplest.fern:3:3
        [0]_.Fern.LabeledItem                          false     01-simplest.fern:3:4
          [0]_.Fern.Label                              false     01-simplest.fern:3:4
          [1]_.Fern                                    false     01-simplest.fern:3:4
          [2]_.Fern.Value                              false     01-simplest.fern:3:4
    [2]_.Fern.LabeledItem                              true      01-simplest.fern:4:3
      [0]_.Fern.Label                                  false     01-simplest.fern:4:3
      [1]_.Fern                                        true      01-simplest.fern:4:3
        [0]_.Fern.LabeledItem                          true      01-simplest.fern:5:5
          [0]_.Fern.Label                              true      01-simplest.fern:5:5
          [1]_.Fern                                    false     01-simplest.fern:5:5
          [2]_.Fern.Value                              true      01-simplest.fern:5:5
        [1]_.Fern.LabeledItem                          false     01-simplest.fern:6:3
          [0]_.Fern.Label                              false     01-simplest.fern:6:3
          [1]_.Fern                                    false     01-simplest.fern:6:3
          [2]_.Fern.Value                              false     01-simplest.fern:6:3
    [3]_.Fern.LabeledItem                              false     01-simplest.fern:7:1
      [0]_.Fern.Label                                  false     01-simplest.fern:7:1
      [1]_.Fern                                        false     01-simplest.fern:7:1
      [2]_.Fern.Value                                  false     01-simplest.fern:7:1
[0]_.Silva                                        <$ Seed ... ] $>
  [0]_.Silva.Section                              <$ Seed ... * $>
    [0]_.Seed.Nonterminal                         Seed
      [0]_.Seed.Nonterminal.Base                  Seed
    [1]_.Seed                                     - AsBs ... 'b' *
      [0]_.Seed.Rule                              AsBs = ... 'b' *
        [0]_.Seed.Nonterminal                     AsBs
          [0]_.Seed.Nonterminal.Base              AsBs
        [1]_.Seed.ExprOrAlias                     = 'a' * 'b' *
          [0]_.Seed.Expr.Concat.concat            'a' * 'b' *
            [0]_.Seed.Expr.Postfix.*              'a' *
              [0]_.Seed.Terminal                  'a'
            [1]_.Seed.Expr.Postfix.*              'b' *
              [0]_.Seed.Terminal                  'b'
  [1]_.Silva.Section                              <$ AsBs ... b $>
    [0]_.Seed.Nonterminal                         AsBs
      [0]_.Seed.Nonterminal.Base                  AsBs
    [1]_.AsBs                                     a a a b b
  [2]_.Silva.Section                              <$ Seed ... ] $>
    [0]_.Seed.Nonterminal                         Seed
      [0]_.Seed.Nonterminal.Base                  Seed
    [1]_.Seed                                     - CppStmts ... identifier ]
      [0]_.Seed.Rule                              CppStmts = ... identifier ]
        [0]_.Seed.Nonterminal                     CppStmts
          [0]_.Seed.Nonterminal.Base              CppStmts
        [1]_.Seed                                 - x ... | identifier
          [0]_.Seed.Rule                          x = ... ) *
            [0]_.Seed.Nonterminal                 x
              [0]_.Seed.Nonterminal.Base          x
            [1]_.Seed.ExprOrAlias                 = ( ... ) *
              [0]_.Seed.Expr.Postfix.*            ( Expr ';' ) *
                [0]_.Seed.Expr.Parens.(           ( Expr ';' )
                  [0]_.Seed.Expr.Concat.concat    Expr ';'
                    [0]_.Seed.NonterminalMaybeVar Expr
                      [0]_.Seed.Nonterminal       Expr
                        [0]_.Seed.Nonterminal.Base Expr
                    [1]_.Seed.Terminal            ';'
          [1]_.Seed.Rule                          Expr =/ ... ',' ]
            [0]_.Seed.Nonterminal                 Expr
              [0]_.Seed.Nonterminal.Base          Expr
            [1]_.Seed.Axe                         Atom [ ... ',' ]
              [0]_.Seed.Nonterminal               Atom
                [0]_.Seed.Nonterminal.Base        Atom
              [1]_.Seed.Axe.Level                 Parens = ... '(' ')'
                [0]_.Seed.Nonterminal.Base        Parens
                [1]_.Seed.Axe.Assoc               nest
                [2]_.Seed.Axe.Ops                 atom_nest '(' ')'
                  [0]_.Seed.Axe.OpType            atom_nest
                  [1]_.Seed.Axe.Op                '('
                  [2]_.Seed.Axe.Op                ')'
              [2]_.Seed.Axe.Level                 Namespace = ... prefix '::'
                [0]_.Seed.Nonterminal.Base        Namespace
                [1]_.Seed.Axe.Assoc               rtl
                [2]_.Seed.Axe.Ops                 infix '::'
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '::'
                [3]_.Seed.Axe.Ops                 prefix '::'
                  [0]_.Seed.Axe.OpType            prefix
                  [1]_.Seed.Axe.Op                '::'
              [3]_.Seed.Axe.Level                 Postfix = ... '.' '->'
                [0]_.Seed.Nonterminal.Base        Postfix
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 postfix '++' '--'
                  [0]_.Seed.Axe.OpType            postfix
                  [1]_.Seed.Axe.Op                '++'
                  [2]_.Seed.Axe.Op                '--'
                [3]_.Seed.Axe.Ops                 postfix_nest '(' ')' '[' ']'
                  [0]_.Seed.Axe.OpType            postfix_nest
                  [1]_.Seed.Axe.Op                '('
                  [2]_.Seed.Axe.Op                ')'
                  [3]_.Seed.Axe.Op                '['
                  [4]_.Seed.Axe.Op                ']'
                [4]_.Seed.Axe.Ops                 infix '.' '->'
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '.'
                  [2]_.Seed.Axe.Op                '->'
              [4]_.Seed.Axe.Level                 Prefix = ... '<.' '.>'
                [0]_.Seed.Nonterminal.Base        Prefix
                [1]_.Seed.Axe.Assoc               rtl
                [2]_.Seed.Axe.Ops                 prefix '++' ... 'sizeof' 'new'
                  [0]_.Seed.Axe.OpType            prefix
                  [1]_.Seed.Axe.Op                '++'
                  [2]_.Seed.Axe.Op                '--'
                  [3]_.Seed.Axe.Op                '+'
                  [4]_.Seed.Axe.Op                '-'
                  [5]_.Seed.Axe.Op                '!'
                  [6]_.Seed.Axe.Op                '~'
                  [7]_.Seed.Axe.Op                '*'
                  [8]_.Seed.Axe.Op                '&'
                  [9]_.Seed.Axe.Op                'sizeof'
                  [10]_.Seed.Axe.Op               'new'
                [3]_.Seed.Axe.Ops                 prefix_nest '<.' '.>'
                  [0]_.Seed.Axe.OpType            prefix_nest
                  [1]_.Seed.Axe.Op                '<.'
                  [2]_.Seed.Axe.Op                '.>'
              [5]_.Seed.Axe.Level                 Member = ... '.*' '->*'
                [0]_.Seed.Nonterminal.Base        Member
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 infix '.*' '->*'
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '.*'
                  [2]_.Seed.Axe.Op                '->*'
              [6]_.Seed.Axe.Level                 Multiply = ... '/' '%'
                [0]_.Seed.Nonterminal.Base        Multiply
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 infix '*' '/' '%'
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '*'
                  [2]_.Seed.Axe.Op                '/'
                  [3]_.Seed.Axe.Op                '%'
              [7]_.Seed.Axe.Level                 Addition = ... '+' '-'
                [0]_.Seed.Nonterminal.Base        Addition
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 infix '+' '-'
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '+'
                  [2]_.Seed.Axe.Op                '-'
              [8]_.Seed.Axe.Level                 Bitshift = ... '<<' '>>'
                [0]_.Seed.Nonterminal.Base        Bitshift
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 infix '<<' '>>'
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '<<'
                  [2]_.Seed.Axe.Op                '>>'
              [9]_.Seed.Axe.Level                 Spaceship = ltr infix '<=>'
                [0]_.Seed.Nonterminal.Base        Spaceship
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 infix '<=>'
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '<=>'
              [10]_.Seed.Axe.Level                Comparison = ... '>' '>='
                [0]_.Seed.Nonterminal.Base        Comparison
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 infix '<' '<=' '>' '>='
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '<'
                  [2]_.Seed.Axe.Op                '<='
                  [3]_.Seed.Axe.Op                '>'
                  [4]_.Seed.Axe.Op                '>='
              [11]_.Seed.Axe.Level                Equality = ... '==' '!='
                [0]_.Seed.Nonterminal.Base        Equality
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 infix '==' '!='
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '=='
                  [2]_.Seed.Axe.Op                '!='
              [12]_.Seed.Axe.Level                BitAnd = ltr infix '&'
                [0]_.Seed.Nonterminal.Base        BitAnd
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 infix '&'
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '&'
              [13]_.Seed.Axe.Level                BitXor = ltr infix '^'
                [0]_.Seed.Nonterminal.Base        BitXor
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 infix '^'
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '^'
              [14]_.Seed.Axe.Level                BitOr = ltr infix '|'
                [0]_.Seed.Nonterminal.Base        BitOr
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 infix '|'
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '|'
              [15]_.Seed.Axe.Level                LogicalAnd = ltr infix '&&'
                [0]_.Seed.Nonterminal.Base        LogicalAnd
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 infix '&&'
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '&&'
              [16]_.Seed.Axe.Level                LogicalOr = ltr infix '||'
                [0]_.Seed.Nonterminal.Base        LogicalOr
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 infix '||'
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '||'
              [17]_.Seed.Axe.Level                Assignment = ... '?' ':'
                [0]_.Seed.Nonterminal.Base        Assignment
                [1]_.Seed.Axe.Assoc               rtl
                [2]_.Seed.Axe.Ops                 infix '=' '+=' '-='
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                '='
                  [2]_.Seed.Axe.Op                '+='
                  [3]_.Seed.Axe.Op                '-='
                [3]_.Seed.Axe.Ops                 prefix 'throw'
                  [0]_.Seed.Axe.OpType            prefix
                  [1]_.Seed.Axe.Op                'throw'
                [4]_.Seed.Axe.Ops                 ternary '?' ':'
                  [0]_.Seed.Axe.OpType            ternary
                  [1]_.Seed.Axe.Op                '?'
                  [2]_.Seed.Axe.Op                ':'
              [18]_.Seed.Axe.Level                Comma = ltr infix ','
                [0]_.Seed.Nonterminal.Base        Comma
                [1]_.Seed.Axe.Assoc               ltr
                [2]_.Seed.Axe.Ops                 infix ','
                  [0]_.Seed.Axe.OpType            infix
                  [1]_.Seed.Axe.Op                ','
          [2]_.Seed.Rule                          Atom = ... | identifier
            [0]_.Seed.Nonterminal                 Atom
              [0]_.Seed.Nonterminal.Base          Atom
            [1]_.Seed.ExprOrAlias                 = number ... | identifier
              [0]_.Seed.Expr.Or.|                 number | string | identifier
                [0]_.Seed.Terminal                number
                [1]_.Seed.Terminal                string
                [2]_.Seed.Terminal                identifier
  [3]_.Silva.Section                              <$ CppStmts ... ; $>
    [0]_.Seed.Nonterminal                         CppStmts
      [0]_.Seed.Nonterminal.Base                  CppStmts
    [1]_.CppStmts                                 1 + ... ++ ;
      [0]_.CppStmts.Expr.Addition.+               1 + ... * 5
        [0]_.CppStmts.Expr.Addition.+             1 + 2 * 3
          [0]_.CppStmts.Atom                      1
          [1]_.CppStmts.Expr.Multiply.*           2 * 3
            [0]_.CppStmts.Atom                    2
            [1]_.CppStmts.Atom                    3
        [1]_.CppStmts.Expr.Multiply.*             4 * 5
          [0]_.CppStmts.Atom                      4
          [1]_.CppStmts.Atom                      5
      [1]_.CppStmts.Expr.Assignment.=             a [ ... 3.14 )
        [0]_.CppStmts.Expr.Postfix.[              a [ 1 ]
          [0]_.CppStmts.Atom                      a
          [1]_.CppStmts.Atom                      1
        [1]_.CppStmts.Expr.Postfix.(              std :: ... 3.14 )
          [0]_.CppStmts.Expr.Namespace.::         std :: sin
            [0]_.CppStmts.Atom                    std
            [1]_.CppStmts.Atom                    sin
          [1]_.CppStmts.Atom                      3.14
      [2]_.CppStmts.Expr.BitOr.|                  1 | ... + 3
        [0]_.CppStmts.Atom                        1
        [1]_.CppStmts.Expr.Comparison.<=          0 <= ... + 3
          [0]_.CppStmts.Expr.Comparison.<=        0 <= x * 10
            [0]_.CppStmts.Atom                    0
            [1]_.CppStmts.Expr.Multiply.*         x * 10
              [0]_.CppStmts.Atom                  x
              [1]_.CppStmts.Atom                  10
          [1]_.CppStmts.Expr.Addition.+           2 + 3
            [0]_.CppStmts.Atom                    2
            [1]_.CppStmts.Atom                    3
      [3]_.CppStmts.Expr.Assignment.=             std :: ... x )
        [0]_.CppStmts.Expr.Postfix.(              std :: ... x )
          [0]_.CppStmts.Expr.Namespace.::         std :: get
            [0]_.CppStmts.Atom                    std
            [1]_.CppStmts.Atom                    get
          [1]_.CppStmts.Atom                      x
        [1]_.CppStmts.Expr.Postfix.(              :: std ... x )
          [0]_.CppStmts.Expr.Namespace.::         :: std :: get
            [0]_.CppStmts.Expr.Namespace.::       std :: get
              [0]_.CppStmts.Atom                  std
              [1]_.CppStmts.Atom                  get
          [1]_.CppStmts.Atom                      x
      [4]_.CppStmts.Expr.Prefix.++                ++ x ++
        [0]_.CppStmts.Expr.Postfix.++             x ++
          [0]_.CppStmts.Atom                      x
  [4]_.Silva.Section                              <$ Fern ... ] $>
    [0]_.Seed.Nonterminal                         Fern
      [0]_.Seed.Nonterminal.Base                  Fern
    [1]_.Fern                                     [ none ... ] ]
      [0]_.Fern.LabeledItem                       none
        [0]_.Fern.Value                           none
      [1]_.Fern.LabeledItem                       true
        [0]_.Fern.Value                           true
      [2]_.Fern.LabeledItem                       42
        [0]_.Fern.Value                           42
      [3]_.Fern.LabeledItem                       hello : 'World'
        [0]_.Fern.Label                           hello
        [1]_.Fern.Value                           'World'
      [4]_.Fern.LabeledItem                       [ ]
        [0]_.Fern                                 [ ]
      [5]_.Fern.LabeledItem                       [ 'one' ... 2.0 ]
        [0]_.Fern                                 [ 'one' ... 2.0 ]
          [0]_.Fern.LabeledItem                   'one' : 1.0
            [0]_.Fern.Label                       'one'
            [1]_.Fern.Value                       1.0
          [1]_.Fern.LabeledItem                   'two' : 2.0
            [0]_.Fern.Label                       'two'
            [1]_.Fern.Value                       2.0

[0]_.Seed                                         - Somelang ... * ]
  [0]_.Seed.Rule                                  Somelang = ... * ]
    [0]_.Seed.Nonterminal                         Somelang
      [0]_.Seed.Nonterminal.Base                  Somelang
    [1]_.Seed                                     - x ... 'b' *
      [0]_.Seed.Rule                              x = As Bs
        [0]_.Seed.Nonterminal                     x
          [0]_.Seed.Nonterminal.Base              x
        [1]_.Seed.ExprOrAlias                     = As Bs
          [0]_.Seed.Expr.Concat.concat            As Bs
            [0]_.Seed.NonterminalMaybeVar         As
              [0]_.Seed.Nonterminal               As
                [0]_.Seed.Nonterminal.Base        As
            [1]_.Seed.NonterminalMaybeVar         Bs
              [0]_.Seed.Nonterminal               Bs
                [0]_.Seed.Nonterminal.Base        Bs
      [1]_.Seed.Rule                              As = 'a' *
        [0]_.Seed.Nonterminal                     As
          [0]_.Seed.Nonterminal.Base              As
        [1]_.Seed.ExprOrAlias                     = 'a' *
          [0]_.Seed.Expr.Postfix.*                'a' *
            [0]_.Seed.Terminal                    'a'
      [2]_.Seed.Rule                              Bs = 'b' *
        [0]_.Seed.Nonterminal                     Bs
          [0]_.Seed.Nonterminal.Base              Bs
        [1]_.Seed.ExprOrAlias                     = 'b' *
          [0]_.Seed.Expr.Postfix.*                'b' *
            [0]_.Seed.Terminal                    'b'

[0]_.Somelang                                     a a ... b b
  [0]_.Somelang.As                                a a a a
  [1]_.Somelang.Bs                                b b b

[0]_.Silva                                        <$ Seed ... ] $>
  [0]_.Silva.Section                              <$ Seed ... ] $>
    [0]_.Seed.Nonterminal                         Seed
      [0]_.Seed.Nonterminal.Base                  Seed
    [1]_.Seed                                     - Soil ... ] ]
      [0]_.Seed.Rule                              Soil = ... ] ]
        [0]_.Seed.Nonterminal                     Soil
          [0]_.Seed.Nonterminal.Base              Soil
        [1]_.Seed                                 - x ... Expr ]
          [0]_.Seed.Rule                          x = ... ) *
            [0]_.Seed.Nonterminal                 x
              [0]_.Seed.Nonterminal.Base          x
            [1]_.Seed.ExprOrAlias                 = ( ... ) *
              [0]_.Seed.Expr.Postfix.*            ( Type ... ) *
                [0]_.Seed.Expr.Parens.(           ( Type ... Defn )
                  [0]_.Seed.Expr.Or.|             Type . ... . Defn
                    [0]_.Seed.NonterminalMaybeVar Type . Defn
                      [0]_.Seed.Nonterminal       Type . Defn
                        [0]_.Seed.Nonterminal.Base Type
                        [1]_.Seed.Nonterminal.Base Defn
                    [1]_.Seed.NonterminalMaybeVar Func . Defn
                      [0]_.Seed.Nonterminal       Func . Defn
                        [0]_.Seed.Nonterminal.Base Func
                        [1]_.Seed.Nonterminal.Base Defn
                    [2]_.Seed.NonterminalMaybeVar Variable . Defn
                      [0]_.Seed.Nonterminal       Variable . Defn
                        [0]_.Seed.Nonterminal.Base Variable
                        [1]_.Seed.Nonterminal.Base Defn
          [1]_.Seed.Rule                          Type = ... ] ]
            [0]_.Seed.Nonterminal                 Type
              [0]_.Seed.Nonterminal.Base          Type
            [1]_.Seed                             - x ... ] ]
              [0]_.Seed.Rule                      x = Name | Struct
                [0]_.Seed.Nonterminal             x
                  [0]_.Seed.Nonterminal.Base      x
                [1]_.Seed.ExprOrAlias             = Name | Struct
                  [0]_.Seed.Expr.Or.|             Name | Struct
                    [0]_.Seed.NonterminalMaybeVar Name
                      [0]_.Seed.Nonterminal       Name
                        [0]_.Seed.Nonterminal.Base Name
                    [1]_.Seed.NonterminalMaybeVar Struct
                      [0]_.Seed.Nonterminal       Struct
                        [0]_.Seed.Nonterminal.Base Struct
              [1]_.Seed.Rule                      Name = identifier / '_t$'
                [0]_.Seed.Nonterminal             Name
                  [0]_.Seed.Nonterminal.Base      Name
                [1]_.Seed.ExprOrAlias             = identifier / '_t$'
                  [0]_.Seed.Terminal              identifier / '_t$'
              [2]_.Seed.Rule                      Defn = Name '=' x
                [0]_.Seed.Nonterminal             Defn
                  [0]_.Seed.Nonterminal.Base      Defn
                [1]_.Seed.ExprOrAlias             = Name '=' x
                  [0]_.Seed.Expr.Concat.concat    Name '=' x
                    [0]_.Seed.NonterminalMaybeVar Name
                      [0]_.Seed.Nonterminal       Name
                        [0]_.Seed.Nonterminal.Base Name
                    [1]_.Seed.Terminal            '='
                    [2]_.Seed.NonterminalMaybeVar x
                      [0]_.Seed.Nonterminal       x
                        [0]_.Seed.Nonterminal.Base x
              [3]_.Seed.Rule                      Struct = ... ] ]
                [0]_.Seed.Nonterminal             Struct
                  [0]_.Seed.Nonterminal.Base      Struct
                [1]_.Seed                         - x ... identifier ]
                  [0]_.Seed.Rule                  x = ... * ']'
                    [0]_.Seed.Nonterminal         x
                      [0]_.Seed.Nonterminal.Base  x
                    [1]_.Seed.ExprOrAlias         = '[' Member * ']'
                      [0]_.Seed.Expr.Concat.concat '[' Member * ']'
                        [0]_.Seed.Terminal        '['
                        [1]_.Seed.Expr.Postfix.*  Member *
                          [0]_.Seed.NonterminalMaybeVar Member
                            [0]_.Seed.Nonterminal Member
                              [0]_.Seed.Nonterminal.Base Member
                        [2]_.Seed.Terminal        ']'
                  [1]_.Seed.Rule                  Member = ... identifier ]
                    [0]_.Seed.Nonterminal         Member
                      [0]_.Seed.Nonterminal.Base  Member
                    [1]_.Seed                     - x ... = identifier
                      [0]_.Seed.Rule              x = ... ? ';'
                        [0]_.Seed.Nonterminal     x
                          [0]_.Seed.Nonterminal.Base x
                        [1]_.Seed.ExprOrAlias     = p ... ? ';'
                          [0]_.Seed.Expr.Concat.concat p . ... ? ';'
                            [0]_.Seed.NonterminalMaybeVar p . p
                              [0]_.Seed.Nonterminal p . p
                                [0]_.Seed.Nonterminal.Base p
                                [1]_.Seed.Nonterminal.Base p
                            [1]_.Seed.Expr.Postfix.? Label ?
                              [0]_.Seed.NonterminalMaybeVar Label
                                [0]_.Seed.Nonterminal Label
                                  [0]_.Seed.Nonterminal.Base Label
                            [2]_.Seed.Expr.Postfix.? Init ?
                              [0]_.Seed.NonterminalMaybeVar Init
                                [0]_.Seed.Nonterminal Init
                                  [0]_.Seed.Nonterminal.Base Init
                            [3]_.Seed.Terminal    ';'
                      [1]_.Seed.Rule              Label = ':' Name
                        [0]_.Seed.Nonterminal     Label
                          [0]_.Seed.Nonterminal.Base Label
                        [1]_.Seed.ExprOrAlias     = ':' Name
                          [0]_.Seed.Expr.Concat.concat ':' Name
                            [0]_.Seed.Terminal    ':'
                            [1]_.Seed.NonterminalMaybeVar Name
                              [0]_.Seed.Nonterminal Name
                                [0]_.Seed.Nonterminal.Base Name
                      [2]_.Seed.Rule              Init = ... . Expr
                        [0]_.Seed.Nonterminal     Init
                          [0]_.Seed.Nonterminal.Base Init
                        [1]_.Seed.ExprOrAlias     = '=' ... . Expr
                          [0]_.Seed.Expr.Concat.concat '=' _ ... . Expr
                            [0]_.Seed.Terminal    '='
                            [1]_.Seed.NonterminalMaybeVar _ . Soil . Expr
                              [0]_.Seed.Nonterminal _ . Soil . Expr
                                [0]_.Seed.Nonterminal.Base _
                                [1]_.Seed.Nonterminal.Base Soil
                                [2]_.Seed.Nonterminal.Base Expr
                      [3]_.Seed.Rule              Name = identifier
                        [0]_.Seed.Nonterminal     Name
                          [0]_.Seed.Nonterminal.Base Name
                        [1]_.Seed.ExprOrAlias     = identifier
                          [0]_.Seed.Terminal      identifier
          [2]_.Seed.Rule                          Expr = ... ] ]
            [0]_.Seed.Nonterminal                 Expr
              [0]_.Seed.Nonterminal.Base          Expr
            [1]_.Seed                             - x ... ) ]
              [0]_.Seed.Rule                      x = Axe
                [0]_.Seed.Nonterminal             x
                  [0]_.Seed.Nonterminal.Base      x
                [1]_.Seed.ExprOrAlias             = Axe
                  [0]_.Seed.NonterminalMaybeVar   Axe
                    [0]_.Seed.Nonterminal         Axe
                      [0]_.Seed.Nonterminal.Base  Axe
              [1]_.Seed.Rule                      Maybe = x | epsilon
                [0]_.Seed.Nonterminal             Maybe
                  [0]_.Seed.Nonterminal.Base      Maybe
                [1]_.Seed.ExprOrAlias             = x | epsilon
                  [0]_.Seed.Expr.Or.|             x | epsilon
                    [0]_.Seed.NonterminalMaybeVar x
                      [0]_.Seed.Nonterminal       x
                        [0]_.Seed.Nonterminal.Base x
                    [1]_.Seed.Terminal            epsilon
              [2]_.Seed.Rule                      Axe =/ ... '*=' ]
                [0]_.Seed.Nonterminal             Axe
                  [0]_.Seed.Nonterminal.Base      Axe
                [1]_.Seed.Axe                     Atom [ ... '*=' ]
                  [0]_.Seed.Nonterminal           Atom
                    [0]_.Seed.Nonterminal.Base    Atom
                  [1]_.Seed.Axe.Level             Parens = ... '(' ')'
                    [0]_.Seed.Nonterminal.Base    Parens
                    [1]_.Seed.Axe.Assoc           nest
                    [2]_.Seed.Axe.Ops             atom_nest '(' ')'
                      [0]_.Seed.Axe.OpType        atom_nest
                      [1]_.Seed.Axe.Op            '('
                      [2]_.Seed.Axe.Op            ')'
                  [2]_.Seed.Axe.Level             Member = ltr infix '.'
                    [0]_.Seed.Nonterminal.Base    Member
                    [1]_.Seed.Axe.Assoc           ltr
                    [2]_.Seed.Axe.Ops             infix '.'
                      [0]_.Seed.Axe.OpType        infix
                      [1]_.Seed.Axe.Op            '.'
                  [3]_.Seed.Axe.Level             CallPost = ... '(' ')'
                    [0]_.Seed.Nonterminal.Base    CallPost
                    [1]_.Seed.Axe.Assoc           ltr
                    [2]_.Seed.Axe.Ops             postfix_nest '(' ')'
                      [0]_.Seed.Axe.OpType        postfix_nest
                      [1]_.Seed.Axe.Op            '('
                      [2]_.Seed.Axe.Op            ')'
                  [4]_.Seed.Axe.Level             Typing = ltr infix '::'
                    [0]_.Seed.Nonterminal.Base    Typing
                    [1]_.Seed.Axe.Assoc           ltr
                    [2]_.Seed.Axe.Ops             infix '::'
                      [0]_.Seed.Axe.OpType        infix
                      [1]_.Seed.Axe.Op            '::'
                  [5]_.Seed.Axe.Level             CallPipe = ltr infix '|'
                    [0]_.Seed.Nonterminal.Base    CallPipe
                    [1]_.Seed.Axe.Assoc           ltr
                    [2]_.Seed.Axe.Ops             infix '|'
                      [0]_.Seed.Axe.OpType        infix
                      [1]_.Seed.Axe.Op            '|'
                  [6]_.Seed.Axe.Level             Mul = ... '*' '//'
                    [0]_.Seed.Nonterminal.Base    Mul
                    [1]_.Seed.Axe.Assoc           ltr
                    [2]_.Seed.Axe.Ops             infix '*' '//'
                      [0]_.Seed.Axe.OpType        infix
                      [1]_.Seed.Axe.Op            '*'
                      [2]_.Seed.Axe.Op            '//'
                  [7]_.Seed.Axe.Level             Add = ... '+' '-'
                    [0]_.Seed.Nonterminal.Base    Add
                    [1]_.Seed.Axe.Assoc           ltr
                    [2]_.Seed.Axe.Ops             infix '+' '-'
                      [0]_.Seed.Axe.OpType        infix
                      [1]_.Seed.Axe.Op            '+'
                      [2]_.Seed.Axe.Op            '-'
                  [8]_.Seed.Axe.Level             Comp = ... '>' '>='
                    [0]_.Seed.Nonterminal.Base    Comp
                    [1]_.Seed.Axe.Assoc           ltr
                    [2]_.Seed.Axe.Ops             infix '==' ... '>' '>='
                      [0]_.Seed.Axe.OpType        infix
                      [1]_.Seed.Axe.Op            '=='
                      [2]_.Seed.Axe.Op            '<='
                      [3]_.Seed.Axe.Op            '<'
                      [4]_.Seed.Axe.Op            '>'
                      [5]_.Seed.Axe.Op            '>='
                  [9]_.Seed.Axe.Level             Logic = ... 'and' 'or'
                    [0]_.Seed.Nonterminal.Base    Logic
                    [1]_.Seed.Axe.Assoc           ltr
                    [2]_.Seed.Axe.Ops             infix 'and' 'or'
                      [0]_.Seed.Axe.OpType        infix
                      [1]_.Seed.Axe.Op            'and'
                      [2]_.Seed.Axe.Op            'or'
                  [10]_.Seed.Axe.Level            Assign = ... '+=' '*='
                    [0]_.Seed.Nonterminal.Base    Assign
                    [1]_.Seed.Axe.Assoc           ltr
                    [2]_.Seed.Axe.Ops             infix '=' '+=' '*='
                      [0]_.Seed.Axe.OpType        infix
                      [1]_.Seed.Axe.Op            '='
                      [2]_.Seed.Axe.Op            '+='
                      [3]_.Seed.Axe.Op            '*='
              [3]_.Seed.Rule                      Atom = ... | 'none'
                [0]_.Seed.Nonterminal             Atom
                  [0]_.Seed.Nonterminal.Base      Atom
                [1]_.Seed.ExprOrAlias             = Struct ... | 'none'
                  [0]_.Seed.Expr.Or.|             Struct | ... | 'none'
                    [0]_.Seed.NonterminalMaybeVar Struct
                      [0]_.Seed.Nonterminal       Struct
                        [0]_.Seed.Nonterminal.Base Struct
                    [1]_.Seed.NonterminalMaybeVar _ . Silva . Section
                      [0]_.Seed.Nonterminal       _ . Silva . Section
                        [0]_.Seed.Nonterminal.Base _
                        [1]_.Seed.Nonterminal.Base Silva
                        [2]_.Seed.Nonterminal.Base Section
                    [2]_.Seed.Expr.And.but_then   not keywords_of ... but_then identifier
                      [0]_.Seed.Expr.Prefix.not   not keywords_of _ . Soil
                        [0]_.Seed.Terminal        keywords_of _ . Soil
                          [0]_.Seed.Nonterminal   _ . Soil
                            [0]_.Seed.Nonterminal.Base _
                            [1]_.Seed.Nonterminal.Base Soil
                      [1]_.Seed.Terminal          identifier
                    [3]_.Seed.Terminal            string
                    [4]_.Seed.Terminal            number
                    [5]_.Seed.Terminal            'true'
                    [6]_.Seed.Terminal            'false'
                    [7]_.Seed.Terminal            'none'
              [4]_.Seed.Rule                      Struct = ... ) ]
                [0]_.Seed.Nonterminal             Struct
                  [0]_.Seed.Nonterminal.Base      Struct
                [1]_.Seed                         - x ... p )
                  [0]_.Seed.Rule                  x = ... * ']'
                    [0]_.Seed.Nonterminal         x
                      [0]_.Seed.Nonterminal.Base  x
                    [1]_.Seed.ExprOrAlias         = '[' LabeledItem * ']'
                      [0]_.Seed.Expr.Concat.concat '[' LabeledItem * ']'
                        [0]_.Seed.Terminal        '['
                        [1]_.Seed.Expr.Postfix.*  LabeledItem *
                          [0]_.Seed.NonterminalMaybeVar LabeledItem
                            [0]_.Seed.Nonterminal LabeledItem
                              [0]_.Seed.Nonterminal.Base LabeledItem
                        [2]_.Seed.Terminal        ']'
                  [1]_.Seed.Rule                  LabeledItem = ... p )
                    [0]_.Seed.Nonterminal         LabeledItem
                      [0]_.Seed.Nonterminal.Base  LabeledItem
                    [1]_.Seed.ExprOrAlias         = ( ... p )
                      [0]_.Seed.Expr.Concat.concat ( _ ... p )
                        [0]_.Seed.Expr.Postfix.?  ( _ ... ) ?
                          [0]_.Seed.Expr.Parens.( ( _ ... ':' )
                            [0]_.Seed.Expr.Concat.concat _ . ... Name ':'
                              [0]_.Seed.NonterminalMaybeVar _ . ... . Name
                                [0]_.Seed.Nonterminal _ . ... . Name
                                  [0]_.Seed.Nonterminal.Base _
                                  [1]_.Seed.Nonterminal.Base Soil
                                  [2]_.Seed.Nonterminal.Base Variable
                                  [3]_.Seed.Nonterminal.Base Name
                              [1]_.Seed.Terminal  ':'
                        [1]_.Seed.Expr.Parens.(   ( x | p )
                          [0]_.Seed.Expr.Or.|     x | p
                            [0]_.Seed.NonterminalMaybeVar x
                              [0]_.Seed.Nonterminal x
                                [0]_.Seed.Nonterminal.Base x
                            [1]_.Seed.NonterminalMaybeVar p
                              [0]_.Seed.Nonterminal p
                                [0]_.Seed.Nonterminal.Base p
          [3]_.Seed.Rule                          Func = ... ] ]
            [0]_.Seed.Nonterminal                 Func
              [0]_.Seed.Nonterminal.Base          Func
            [1]_.Seed                             - x ... Body ]
              [0]_.Seed.Rule                      x = Name
                [0]_.Seed.Nonterminal             x
                  [0]_.Seed.Nonterminal.Base      x
                [1]_.Seed.ExprOrAlias             = Name
                  [0]_.Seed.NonterminalMaybeVar   Name
                    [0]_.Seed.Nonterminal         Name
                      [0]_.Seed.Nonterminal.Base  Name
              [1]_.Seed.Rule                      Name = identifier / '_f$'
                [0]_.Seed.Nonterminal             Name
                  [0]_.Seed.Nonterminal.Base      Name
                [1]_.Seed.ExprOrAlias             = identifier / '_f$'
                  [0]_.Seed.Terminal              identifier / '_f$'
              [2]_.Seed.Rule                      Defn = ... Signature Body
                [0]_.Seed.Nonterminal             Defn
                  [0]_.Seed.Nonterminal.Base      Defn
                [1]_.Seed.ExprOrAlias             = Name '=' Signature Body
                  [0]_.Seed.Expr.Concat.concat    Name '=' Signature Body
                    [0]_.Seed.NonterminalMaybeVar Name
                      [0]_.Seed.Nonterminal       Name
                        [0]_.Seed.Nonterminal.Base Name
                    [1]_.Seed.Terminal            '='
                    [2]_.Seed.NonterminalMaybeVar Signature
                      [0]_.Seed.Nonterminal       Signature
                        [0]_.Seed.Nonterminal.Base Signature
                    [3]_.Seed.NonterminalMaybeVar Body
                      [0]_.Seed.Nonterminal       Body
                        [0]_.Seed.Nonterminal.Base Body
              [3]_.Seed.Rule                      Signature = ... ) ?
                [0]_.Seed.Nonterminal             Signature
                  [0]_.Seed.Nonterminal.Base      Signature
                [1]_.Seed.ExprOrAlias             = p ... ) ?
                  [0]_.Seed.Expr.Concat.concat    p . ... ) ?
                    [0]_.Seed.NonterminalMaybeVar p . Type
                      [0]_.Seed.Nonterminal       p . Type
                        [0]_.Seed.Nonterminal.Base p
                        [1]_.Seed.Nonterminal.Base Type
                    [1]_.Seed.Expr.Postfix.?      ( '->' ... ) ?
                      [0]_.Seed.Expr.Parens.(     ( '->' ... Type )
                        [0]_.Seed.Expr.Concat.concat '->' p . Type
                          [0]_.Seed.Terminal      '->'
                          [1]_.Seed.NonterminalMaybeVar p . Type
                            [0]_.Seed.Nonterminal p . Type
                              [0]_.Seed.Nonterminal.Base p
                              [1]_.Seed.Nonterminal.Base Type
              [4]_.Seed.Rule                      Body = ... * '}'
                [0]_.Seed.Nonterminal             Body
                  [0]_.Seed.Nonterminal.Base      Body
                [1]_.Seed.ExprOrAlias             = '{' Stmt * '}'
                  [0]_.Seed.Expr.Concat.concat    '{' Stmt * '}'
                    [0]_.Seed.Terminal            '{'
                    [1]_.Seed.Expr.Postfix.*      Stmt *
                      [0]_.Seed.NonterminalMaybeVar Stmt
                        [0]_.Seed.Nonterminal     Stmt
                          [0]_.Seed.Nonterminal.Base Stmt
                    [2]_.Seed.Terminal            '}'
              [5]_.Seed.Rule                      Stmt = ... Body ]
                [0]_.Seed.Nonterminal             Stmt
                  [0]_.Seed.Nonterminal.Base      Stmt
                [1]_.Seed                         - x ... . Body
                  [0]_.Seed.Rule                  x = ... Expr ';'
                    [0]_.Seed.Nonterminal         x
                      [0]_.Seed.Nonterminal.Base  x
                    [1]_.Seed.ExprOrAlias         = If ... Expr ';'
                      [0]_.Seed.Expr.Or.|         If | ... Expr ';'
                        [0]_.Seed.NonterminalMaybeVar If
                          [0]_.Seed.Nonterminal   If
                            [0]_.Seed.Nonterminal.Base If
                        [1]_.Seed.NonterminalMaybeVar For
                          [0]_.Seed.Nonterminal   For
                            [0]_.Seed.Nonterminal.Base For
                        [2]_.Seed.Expr.Concat.concat _ . ... Expr ';'
                          [0]_.Seed.NonterminalMaybeVar _ . Soil . Expr
                            [0]_.Seed.Nonterminal _ . Soil . Expr
                              [0]_.Seed.Nonterminal.Base _
                              [1]_.Seed.Nonterminal.Base Soil
                              [2]_.Seed.Nonterminal.Base Expr
                          [1]_.Seed.Terminal      ';'
                  [1]_.Seed.Rule                  If = ... Body ]
                    [0]_.Seed.Nonterminal         If
                      [0]_.Seed.Nonterminal.Base  If
                    [1]_.Seed                     - x ... . Body
                      [0]_.Seed.Rule              x = ... ) ?
                        [0]_.Seed.Nonterminal     x
                          [0]_.Seed.Nonterminal.Base x
                        [1]_.Seed.ExprOrAlias     = 'if' ... ) ?
                          [0]_.Seed.Expr.Concat.concat 'if' Branch ... ) ?
                            [0]_.Seed.Terminal    'if'
                            [1]_.Seed.NonterminalMaybeVar Branch
                              [0]_.Seed.Nonterminal Branch
                                [0]_.Seed.Nonterminal.Base Branch
                            [2]_.Seed.Expr.Postfix.* ( 'elif' Branch ) *
                              [0]_.Seed.Expr.Parens.( ( 'elif' Branch )
                                [0]_.Seed.Expr.Concat.concat 'elif' Branch
                                  [0]_.Seed.Terminal 'elif'
                                  [1]_.Seed.NonterminalMaybeVar Branch
                                    [0]_.Seed.Nonterminal Branch
                                      [0]_.Seed.Nonterminal.Base Branch
                            [3]_.Seed.Expr.Postfix.? ( 'else' ... ) ?
                              [0]_.Seed.Expr.Parens.( ( 'else' ... Body )
                                [0]_.Seed.Expr.Concat.concat 'else' p ... . Body
                                  [0]_.Seed.Terminal 'else'
                                  [1]_.Seed.NonterminalMaybeVar p . p . Body
                                    [0]_.Seed.Nonterminal p . p . Body
                                      [0]_.Seed.Nonterminal.Base p
                                      [1]_.Seed.Nonterminal.Base p
                                      [2]_.Seed.Nonterminal.Base Body
                      [1]_.Seed.Rule              Branch = ... . Body
                        [0]_.Seed.Nonterminal     Branch
                          [0]_.Seed.Nonterminal.Base Branch
                        [1]_.Seed.ExprOrAlias     = _ ... . Body
                          [0]_.Seed.Expr.Concat.concat _ . ... . Body
                            [0]_.Seed.NonterminalMaybeVar _ . Soil . Expr
                              [0]_.Seed.Nonterminal _ . Soil . Expr
                                [0]_.Seed.Nonterminal.Base _
                                [1]_.Seed.Nonterminal.Base Soil
                                [2]_.Seed.Nonterminal.Base Expr
                            [1]_.Seed.NonterminalMaybeVar p . p . Body
                              [0]_.Seed.Nonterminal p . p . Body
                                [0]_.Seed.Nonterminal.Base p
                                [1]_.Seed.Nonterminal.Base p
                                [2]_.Seed.Nonterminal.Base Body
                  [2]_.Seed.Rule                  For = ... . Body
                    [0]_.Seed.Nonterminal         For
                      [0]_.Seed.Nonterminal.Base  For
                    [1]_.Seed.ExprOrAlias         = 'for' ... . Body
                      [0]_.Seed.Expr.Concat.concat 'for' _ ... . Body
                        [0]_.Seed.Terminal        'for'
                        [1]_.Seed.NonterminalMaybeVar _ . ... . Maybe
                          [0]_.Seed.Nonterminal   _ . ... . Maybe
                            [0]_.Seed.Nonterminal.Base _
                            [1]_.Seed.Nonterminal.Base Soil
                            [2]_.Seed.Nonterminal.Base Expr
                            [3]_.Seed.Nonterminal.Base Maybe
                        [2]_.Seed.Terminal        ';'
                        [3]_.Seed.NonterminalMaybeVar _ . ... . Maybe
                          [0]_.Seed.Nonterminal   _ . ... . Maybe
                            [0]_.Seed.Nonterminal.Base _
                            [1]_.Seed.Nonterminal.Base Soil
                            [2]_.Seed.Nonterminal.Base Expr
                            [3]_.Seed.Nonterminal.Base Maybe
                        [4]_.Seed.Terminal        ';'
                        [5]_.Seed.NonterminalMaybeVar _ . ... . Maybe
                          [0]_.Seed.Nonterminal   _ . ... . Maybe
                            [0]_.Seed.Nonterminal.Base _
                            [1]_.Seed.Nonterminal.Base Soil
                            [2]_.Seed.Nonterminal.Base Expr
                            [3]_.Seed.Nonterminal.Base Maybe
                        [6]_.Seed.NonterminalMaybeVar p . Body
                          [0]_.Seed.Nonterminal   p . Body
                            [0]_.Seed.Nonterminal.Base p
                            [1]_.Seed.Nonterminal.Base Body
          [4]_.Seed.Rule                          Variable = ... Expr ]
            [0]_.Seed.Nonterminal                 Variable
              [0]_.Seed.Nonterminal.Base          Variable
            [1]_.Seed                             - Name ... . Expr
              [0]_.Seed.Rule                      Name = ... but_then identifier
                [0]_.Seed.Nonterminal             Name
                  [0]_.Seed.Nonterminal.Base      Name
                [1]_.Seed.ExprOrAlias             = not ... but_then identifier
                  [0]_.Seed.Expr.And.but_then     not p ... but_then identifier
                    [0]_.Seed.Expr.Prefix.not     not p ... . Name
                      [0]_.Seed.NonterminalMaybeVar p . Type . Name
                        [0]_.Seed.Nonterminal     p . Type . Name
                          [0]_.Seed.Nonterminal.Base p
                          [1]_.Seed.Nonterminal.Base Type
                          [2]_.Seed.Nonterminal.Base Name
                    [1]_.Seed.Expr.Prefix.not     not p ... . Name
                      [0]_.Seed.NonterminalMaybeVar p . Func . Name
                        [0]_.Seed.Nonterminal     p . Func . Name
                          [0]_.Seed.Nonterminal.Base p
                          [1]_.Seed.Nonterminal.Base Func
                          [2]_.Seed.Nonterminal.Base Name
                    [2]_.Seed.Terminal            identifier
              [1]_.Seed.Rule                      Defn = ... . Expr
                [0]_.Seed.Nonterminal             Defn
                  [0]_.Seed.Nonterminal.Base      Defn
                [1]_.Seed.ExprOrAlias             = Name ... . Expr
                  [0]_.Seed.Expr.Concat.concat    Name '=' p . Expr
                    [0]_.Seed.NonterminalMaybeVar Name
                      [0]_.Seed.Nonterminal       Name
                        [0]_.Seed.Nonterminal.Base Name
                    [1]_.Seed.Terminal            '='
                    [2]_.Seed.NonterminalMaybeVar p . Expr
                      [0]_.Seed.Nonterminal       p . Expr
                        [0]_.Seed.Nonterminal.Base p
                        [1]_.Seed.Nonterminal.Base Expr

[0]_.Silva                                        <$ Soil ... } $>
  [0]_.Silva.Section                              <$ Soil ... } $>
    [0]_.Seed.Nonterminal                         Soil
      [0]_.Seed.Nonterminal.Base                  Soil
    [1]_.Soil                                     name_t = ... } }
      [0]_.Soil.Type.Defn                         name_t = str_t
        [0]_.Soil.Type.Name                       name_t
        [1]_.Soil.Type                            str_t
          [0]_.Soil.Type.Name                     str_t
      [1]_.Soil.Type.Defn                         age_t = i32_t
        [0]_.Soil.Type.Name                       age_t
        [1]_.Soil.Type                            i32_t
          [0]_.Soil.Type.Name                     i32_t
      [2]_.Soil.Type.Defn                         person_t = ... ; ]
        [0]_.Soil.Type.Name                       person_t
        [1]_.Soil.Type                            [ [ ... ; ]
          [0]_.Soil.Type.Struct                   [ [ ... ; ]
            [0]_.Soil.Type.Struct.Member          [ name_t ... ] ;
              [0]_.Soil.Type                      [ name_t ... ; ]
                [0]_.Soil.Type.Struct             [ name_t ... ; ]
                  [0]_.Soil.Type.Struct.Member    name_t : first ;
                    [0]_.Soil.Type                name_t
                      [0]_.Soil.Type.Name         name_t
                    [1]_.Soil.Type.Struct.Member.Label : first
                      [0]_.Soil.Type.Struct.Member.Name first
                  [1]_.Soil.Type.Struct.Member    name_t : ... 'Trump' ;
                    [0]_.Soil.Type                name_t
                      [0]_.Soil.Type.Name         name_t
                    [1]_.Soil.Type.Struct.Member.Label : last
                      [0]_.Soil.Type.Struct.Member.Name last
                    [2]_.Soil.Type.Struct.Member.Init = 'Trump'
                      [0]_.Soil.Expr              'Trump'
                        [0]_.Soil.Expr.Atom       'Trump'
              [1]_.Soil.Type.Struct.Member.Label  : name
                [0]_.Soil.Type.Struct.Member.Name name
              [2]_.Soil.Type.Struct.Member.Init   = [ 'Arno' 'Nym' ]
                [0]_.Soil.Expr                    [ 'Arno' 'Nym' ]
                  [0]_.Soil.Expr.Atom             [ 'Arno' 'Nym' ]
                    [0]_.Soil.Expr.Struct         [ 'Arno' 'Nym' ]
                      [0]_.Soil.Expr.Struct.LabeledItem 'Arno'
                        [0]_.Soil.Expr            'Arno'
                          [0]_.Soil.Expr.Atom     'Arno'
                      [1]_.Soil.Expr.Struct.LabeledItem 'Nym'
                        [0]_.Soil.Expr            'Nym'
                          [0]_.Soil.Expr.Atom     'Nym'
            [1]_.Soil.Type.Struct.Member          age_t : ... ) ;
              [0]_.Soil.Type                      age_t
                [0]_.Soil.Type.Name               age_t
              [1]_.Soil.Type.Struct.Member.Label  : age
                [0]_.Soil.Type.Struct.Member.Name age
              [2]_.Soil.Type.Struct.Member.Init   = size_f ... first )
                [0]_.Soil.Expr                    size_f ( ... first )
                  [0]_.Soil.Expr.Axe.CallPost.(   size_f ( ... first )
                    [0]_.Soil.Expr.Atom           size_f
                    [1]_.Soil.Expr.Axe.Member..   name . first
                      [0]_.Soil.Expr.Atom         name
                      [1]_.Soil.Expr.Atom         first
      [3]_.Soil.Variable.Defn                     bs = ... 80 ]
        [0]_.Soil.Variable.Name                   bs
        [1]_.Soil.Expr                            person_t :: ... 80 ]
          [0]_.Soil.Expr.Axe.Typing.::            person_t :: ... 80 ]
            [0]_.Soil.Expr.Atom                   person_t
            [1]_.Soil.Expr.Atom                   [ [ ... 80 ]
              [0]_.Soil.Expr.Struct               [ [ ... 80 ]
                [0]_.Soil.Expr.Struct.LabeledItem [ 'Bjarne' 'Stroustrup' ]
                  [0]_.Soil.Expr.Struct           [ 'Bjarne' 'Stroustrup' ]
                    [0]_.Soil.Expr.Struct.LabeledItem 'Bjarne'
                      [0]_.Soil.Expr              'Bjarne'
                        [0]_.Soil.Expr.Atom       'Bjarne'
                    [1]_.Soil.Expr.Struct.LabeledItem 'Stroustrup'
                      [0]_.Soil.Expr              'Stroustrup'
                        [0]_.Soil.Expr.Atom       'Stroustrup'
                [1]_.Soil.Expr.Struct.LabeledItem 80
                  [0]_.Soil.Expr                  80
                    [0]_.Soil.Expr.Atom           80
      [4]_.Soil.Func.Defn                         is_adult_f = ... ; }
        [0]_.Soil.Func.Name                       is_adult_f
        [1]_.Soil.Func.Signature                  person_t -> bool_t
          [0]_.Soil.Type                          person_t
            [0]_.Soil.Type.Name                   person_t
          [1]_.Soil.Type                          bool_t
            [0]_.Soil.Type.Name                   bool_t
        [2]_.Soil.Func.Body                       { retval ... ; }
          [0]_.Soil.Func.Stmt                     retval = ... 18 ;
            [0]_.Soil.Expr                        retval = ... >= 18
              [0]_.Soil.Expr.Axe.Assign.=         retval = ... >= 18
                [0]_.Soil.Expr.Atom               retval
                [1]_.Soil.Expr.Axe.Comp.>=        arg . age >= 18
                  [0]_.Soil.Expr.Axe.Member..     arg . age
                    [0]_.Soil.Expr.Atom           arg
                    [1]_.Soil.Expr.Atom           age
                  [1]_.Soil.Expr.Atom             18
      [5]_.Soil.Func.Defn                         example_f = ... } }
        [0]_.Soil.Func.Name                       example_f
        [1]_.Soil.Func.Signature                  [ ]
          [0]_.Soil.Type                          [ ]
            [0]_.Soil.Type.Struct                 [ ]
        [2]_.Soil.Func.Body                       { age ... } }
          [0]_.Soil.Func.Stmt                     age = ... 42 ;
            [0]_.Soil.Expr                        age = age_t :: 42
              [0]_.Soil.Expr.Axe.Assign.=         age = age_t :: 42
                [0]_.Soil.Expr.Atom               age
                [1]_.Soil.Expr.Axe.Typing.::      age_t :: 42
                  [0]_.Soil.Expr.Atom             age_t
                  [1]_.Soil.Expr.Atom             42
          [1]_.Soil.Func.Stmt                     p1 = ... ] ;
            [0]_.Soil.Expr                        p1 = ... 20 ]
              [0]_.Soil.Expr.Axe.Assign.=         p1 = ... 20 ]
                [0]_.Soil.Expr.Atom               p1
                [1]_.Soil.Expr.Axe.Typing.::      person_t :: ... 20 ]
                  [0]_.Soil.Expr.Atom             person_t
                  [1]_.Soil.Expr.Atom             [ name ... 20 ]
                    [0]_.Soil.Expr.Struct         [ name ... 20 ]
                      [0]_.Soil.Expr.Struct.LabeledItem name : ... 'Bobson' ]
                        [0]_.Soil.Variable.Name   name
                        [1]_.Soil.Expr.Struct     [ first ... 'Bobson' ]
                          [0]_.Soil.Expr.Struct.LabeledItem first : 'Bob'
                            [0]_.Soil.Variable.Name first
                            [1]_.Soil.Expr        'Bob'
                              [0]_.Soil.Expr.Atom 'Bob'
                          [1]_.Soil.Expr.Struct.LabeledItem last : 'Bobson'
                            [0]_.Soil.Variable.Name last
                            [1]_.Soil.Expr        'Bobson'
                              [0]_.Soil.Expr.Atom 'Bobson'
                      [1]_.Soil.Expr.Struct.LabeledItem age : 20
                        [0]_.Soil.Variable.Name   age
                        [1]_.Soil.Expr            20
                          [0]_.Soil.Expr.Atom     20
          [2]_.Soil.Func.Stmt                     p2 = ... ] ;
            [0]_.Soil.Expr                        p2 = ... 30 ]
              [0]_.Soil.Expr.Axe.Assign.=         p2 = ... 30 ]
                [0]_.Soil.Expr.Atom               p2
                [1]_.Soil.Expr.Axe.Typing.::      person_t :: ... 30 ]
                  [0]_.Soil.Expr.Atom             person_t
                  [1]_.Soil.Expr.Atom             [ [ ... 30 ]
                    [0]_.Soil.Expr.Struct         [ [ ... 30 ]
                      [0]_.Soil.Expr.Struct.LabeledItem [ 'Alice' 'Allison' ]
                        [0]_.Soil.Expr.Struct     [ 'Alice' 'Allison' ]
                          [0]_.Soil.Expr.Struct.LabeledItem 'Alice'
                            [0]_.Soil.Expr        'Alice'
                              [0]_.Soil.Expr.Atom 'Alice'
                          [1]_.Soil.Expr.Struct.LabeledItem 'Allison'
                            [0]_.Soil.Expr        'Allison'
                              [0]_.Soil.Expr.Atom 'Allison'
                      [1]_.Soil.Expr.Struct.LabeledItem 30
                        [0]_.Soil.Expr            30
                          [0]_.Soil.Expr.Atom     30
          [3]_.Soil.Func.Stmt                     [ '{} is-adult = {}' ... log_f ;
            [0]_.Soil.Expr                        [ '{} is-adult = {}' ... | log_f
              [0]_.Soil.Expr.Axe.CallPipe.|       [ '{} is-adult = {}' ... | log_f
                [0]_.Soil.Expr.Atom               [ '{} is-adult = {}' ... ) ]
                  [0]_.Soil.Expr.Struct           [ '{} is-adult = {}' ... ) ]
                    [0]_.Soil.Expr.Struct.LabeledItem '{} is-adult = {}'
                      [0]_.Soil.Expr              '{} is-adult = {}'
                        [0]_.Soil.Expr.Atom       '{} is-adult = {}'
                    [1]_.Soil.Expr.Struct.LabeledItem p1
                      [0]_.Soil.Expr              p1
                        [0]_.Soil.Expr.Atom       p1
                    [2]_.Soil.Expr.Struct.LabeledItem is_adult_f ( p1 )
                      [0]_.Soil.Expr              is_adult_f ( p1 )
                        [0]_.Soil.Expr.Axe.CallPost.( is_adult_f ( p1 )
                          [0]_.Soil.Expr.Atom     is_adult_f
                          [1]_.Soil.Expr.Atom     p1
                [1]_.Soil.Expr.Atom               log_f
          [4]_.Soil.Func.Stmt                     vector_f ( ... log_f ;
            [0]_.Soil.Expr                        vector_f ( ... | log_f
              [0]_.Soil.Expr.Axe.CallPipe.|       vector_f ( ... | log_f
                [0]_.Soil.Expr.Axe.CallPipe.|     vector_f ( ... 40 )
                  [0]_.Soil.Expr.Axe.Typing.::    vector_f ( ... p2 ]
                    [0]_.Soil.Expr.Axe.CallPost.( vector_f ( person_t )
                      [0]_.Soil.Expr.Atom         vector_f
                      [1]_.Soil.Expr.Atom         person_t
                    [1]_.Soil.Expr.Atom           [ p1 p2 ]
                      [0]_.Soil.Expr.Struct       [ p1 p2 ]
                        [0]_.Soil.Expr.Struct.LabeledItem p1
                          [0]_.Soil.Expr          p1
                            [0]_.Soil.Expr.Atom   p1
                        [1]_.Soil.Expr.Struct.LabeledItem p2
                          [0]_.Soil.Expr          p2
                            [0]_.Soil.Expr.Atom   p2
                  [1]_.Soil.Expr.Axe.CallPost.(   std . ... 40 )
                    [0]_.Soil.Expr.Axe.Member..   std . filter_m
                      [0]_.Soil.Expr.Atom         std
                      [1]_.Soil.Expr.Atom         filter_m
                    [1]_.Soil.Expr.Axe.Comp.<=    arg . age <= 40
                      [0]_.Soil.Expr.Axe.Member.. arg . age
                        [0]_.Soil.Expr.Atom       arg
                        [1]_.Soil.Expr.Atom       age
                      [1]_.Soil.Expr.Atom         40
                [1]_.Soil.Expr.Atom               log_f
          [5]_.Soil.Func.Stmt                     <$ Seed ... print_f ;
            [0]_.Soil.Expr                        <$ Seed ... | print_f
              [0]_.Soil.Expr.Axe.CallPipe.|       <$ Seed ... | print_f
                [0]_.Soil.Expr.Atom               <$ Seed ... * $>
                  [0]_.Silva.Section              <$ Seed ... * $>
                    [0]_.Seed.Nonterminal         Seed
                      [0]_.Seed.Nonterminal.Base  Seed
                    [1]_.Seed                     - SomeRule = identifier *
                      [0]_.Seed.Rule              SomeRule = identifier *
                        [0]_.Seed.Nonterminal     SomeRule
                          [0]_.Seed.Nonterminal.Base SomeRule
                        [1]_.Seed.ExprOrAlias     = identifier *
                          [0]_.Seed.Expr.Postfix.* identifier *
                            [0]_.Seed.Terminal    identifier
                [1]_.Soil.Expr.Atom               print_f
          [6]_.Soil.Func.Stmt                     if p1 ... ; }
            [0]_.Soil.Func.Stmt.If                if p1 ... ; }
              [0]_.Soil.Func.Stmt.If.Branch       p1 . ... ; }
                [0]_.Soil.Expr                    p1 . ... > 10
                  [0]_.Soil.Expr.Axe.Comp.>       p1 . ... > 10
                    [0]_.Soil.Expr.Axe.CallPipe.| p1 . ... | size_f
                      [0]_.Soil.Expr.Axe.Member.. p1 . name . first
                        [0]_.Soil.Expr.Axe.Member.. p1 . name
                          [0]_.Soil.Expr.Atom     p1
                          [1]_.Soil.Expr.Atom     name
                        [1]_.Soil.Expr.Atom       first
                      [1]_.Soil.Expr.Atom         size_f
                    [1]_.Soil.Expr.Atom           10
                [1]_.Soil.Func.Body               { 'This name is long' ... ; }
                  [0]_.Soil.Func.Stmt             'This name is long' | log_f ;
                    [0]_.Soil.Expr                'This name is long' | log_f
                      [0]_.Soil.Expr.Axe.CallPipe.| 'This name is long' | log_f
                        [0]_.Soil.Expr.Atom       'This name is long'
                        [1]_.Soil.Expr.Atom       log_f
              [1]_.Soil.Func.Stmt.If.Branch       p1 . ... ; }
                [0]_.Soil.Expr                    p1 . ... > 5
                  [0]_.Soil.Expr.Axe.Comp.>       p1 . ... > 5
                    [0]_.Soil.Expr.Axe.CallPipe.| p1 . ... | size_f
                      [0]_.Soil.Expr.Axe.Member.. p1 . name . first
                        [0]_.Soil.Expr.Axe.Member.. p1 . name
                          [0]_.Soil.Expr.Atom     p1
                          [1]_.Soil.Expr.Atom     name
                        [1]_.Soil.Expr.Atom       first
                      [1]_.Soil.Expr.Atom         size_f
                    [1]_.Soil.Expr.Atom           5
                [1]_.Soil.Func.Body               { 'This name it not long' ... ; }
                  [0]_.Soil.Func.Stmt             'This name it not long' | log_f ;
                    [0]_.Soil.Expr                'This name it not long' | log_f
                      [0]_.Soil.Expr.Axe.CallPipe.| 'This name it not long' | log_f
                        [0]_.Soil.Expr.Atom       'This name it not long'
                        [1]_.Soil.Expr.Atom       log_f
              [2]_.Soil.Func.Body                 { 'This name it short' ... ; }
                [0]_.Soil.Func.Stmt               'This name it short' | log_f ;
                  [0]_.Soil.Expr                  'This name it short' | log_f
                    [0]_.Soil.Expr.Axe.CallPipe.| 'This name it short' | log_f
                      [0]_.Soil.Expr.Atom         'This name it short'
                      [1]_.Soil.Expr.Atom         log_f
          [7]_.Soil.Func.Stmt                     sum = ... 0 ;
            [0]_.Soil.Expr                        sum = i64_t :: 0
              [0]_.Soil.Expr.Axe.Assign.=         sum = i64_t :: 0
                [0]_.Soil.Expr.Atom               sum
                [1]_.Soil.Expr.Axe.Typing.::      i64_t :: 0
                  [0]_.Soil.Expr.Atom             i64_t
                  [1]_.Soil.Expr.Atom             0
          [8]_.Soil.Func.Stmt                     for i ... ; }
            [0]_.Soil.Func.Stmt.For               for i ... ; }
              [0]_.Soil.Expr.Maybe                i = i64_t :: 0
                [0]_.Soil.Expr                    i = i64_t :: 0
                  [0]_.Soil.Expr.Axe.Assign.=     i = i64_t :: 0
                    [0]_.Soil.Expr.Atom           i
                    [1]_.Soil.Expr.Axe.Typing.::  i64_t :: 0
                      [0]_.Soil.Expr.Atom         i64_t
                      [1]_.Soil.Expr.Atom         0
              [1]_.Soil.Expr.Maybe                i < n
                [0]_.Soil.Expr                    i < n
                  [0]_.Soil.Expr.Axe.Comp.<       i < n
                    [0]_.Soil.Expr.Atom           i
                    [1]_.Soil.Expr.Atom           n
              [2]_.Soil.Expr.Maybe                i += 1
                [0]_.Soil.Expr                    i += 1
                  [0]_.Soil.Expr.Axe.Assign.+=    i += 1
                    [0]_.Soil.Expr.Atom           i
                    [1]_.Soil.Expr.Atom           1
              [3]_.Soil.Func.Body                 { sum ... ; }
                [0]_.Soil.Func.Stmt               sum += i ;
                  [0]_.Soil.Expr                  sum += i
                    [0]_.Soil.Expr.Axe.Assign.+=  sum += i
                      [0]_.Soil.Expr.Atom         sum
                      [1]_.Soil.Expr.Atom         i
          [9]_.Soil.Func.Stmt                     abc = 42 ;
            [0]_.Soil.Expr                        abc = 42
              [0]_.Soil.Expr.Axe.Assign.=         abc = 42
                [0]_.Soil.Expr.Atom               abc
                [1]_.Soil.Expr.Atom               42
          [10]_.Soil.Func.Stmt                    for ; ... ; }
            [0]_.Soil.Func.Stmt.For               for ; ... ; }
              [0]_.Soil.Expr.Maybe                
              [1]_.Soil.Expr.Maybe                i < n
                [0]_.Soil.Expr                    i < n
                  [0]_.Soil.Expr.Axe.Comp.<       i < n
                    [0]_.Soil.Expr.Atom           i
                    [1]_.Soil.Expr.Atom           n
              [2]_.Soil.Expr.Maybe                
              [3]_.Soil.Func.Body                 { sum ... ; }
                [0]_.Soil.Func.Stmt               sum += i ;
                  [0]_.Soil.Expr                  sum += i
                    [0]_.Soil.Expr.Axe.Assign.+=  sum += i
                      [0]_.Soil.Expr.Atom         sum
                      [1]_.Soil.Expr.Atom         i

[0]_.Lox                                          print 'Hello, World!' ... outer ;
  [0]_.Lox.Stmt                                   print 'Hello, World!' ;
    [0]_.Lox.Stmt.Print                           print 'Hello, World!' ;
      [0]_.Lox.Expr.Atom                          'Hello, World!'
  [1]_.Lox.Stmt                                   print 1 ... 4 ;
    [0]_.Lox.Stmt.Print                           print 1 ... 4 ;
      [0]_.Lox.Expr.Term.-                        1 + ... - 4
        [0]_.Lox.Expr.Term.+                      1 + 2 * 3
          [0]_.Lox.Expr.Atom                      1
          [1]_.Lox.Expr.Factor.*                  2 * 3
            [0]_.Lox.Expr.Atom                    2
            [1]_.Lox.Expr.Atom                    3
        [1]_.Lox.Expr.Atom                        4
  [2]_.Lox.Decl                                   var x ... 42 ;
    [0]_.Lox.Decl.Var                             var x ... 42 ;
      [0]_.Lox.Expr.Term.+                        100 + 42
        [0]_.Lox.Expr.Atom                        100
        [1]_.Lox.Expr.Atom                        42
  [3]_.Lox.Stmt                                   print x ;
    [0]_.Lox.Stmt.Print                           print x ;
      [0]_.Lox.Expr.Atom                          x
  [4]_.Lox.Decl                                   fun sayHi ... ; }
    [0]_.Lox.Decl.Fun                             fun sayHi ... ; }
      [0]_.Lox.Decl.Function                      sayHi ( ... ; }
        [0]_.Lox.Decl.Function.Parameters         first , last
          [0]_.Lox.Decl.Function.Parameter        first
          [1]_.Lox.Decl.Function.Parameter        last
        [1]_.Lox.Stmt.Block                       { print ... ; }
          [0]_.Lox.Stmt                           print 'Hi, ' ... '!' ;
            [0]_.Lox.Stmt.Print                   print 'Hi, ' ... '!' ;
              [0]_.Lox.Expr.Term.+                'Hi, ' + ... + '!'
                [0]_.Lox.Expr.Term.+              'Hi, ' + ... + last
                  [0]_.Lox.Expr.Term.+            'Hi, ' + first + ' '
                    [0]_.Lox.Expr.Term.+          'Hi, ' + first
                      [0]_.Lox.Expr.Atom          'Hi, '
                      [1]_.Lox.Expr.Atom          first
                    [1]_.Lox.Expr.Atom            ' '
                  [1]_.Lox.Expr.Atom              last
                [1]_.Lox.Expr.Atom                '!'
  [5]_.Lox.Stmt                                   print sayHi ;
    [0]_.Lox.Stmt.Print                           print sayHi ;
      [0]_.Lox.Expr.Atom                          sayHi
  [6]_.Lox.Stmt                                   sayHi ( ... ) ;
    [0]_.Lox.Stmt.ExprStmt                        sayHi ( ... ) ;
      [0]_.Lox.Expr.Call.(                        sayHi ( ... 'Reader' )
        [0]_.Lox.Expr.Atom                        sayHi
        [1]_.Lox.Expr.Arguments                   'Dear' , 'Reader'
          [0]_.Lox.Expr.Atom                      'Dear'
          [1]_.Lox.Expr.Atom                      'Reader'
  [7]_.Lox.Decl                                   fun fib ... ; }
    [0]_.Lox.Decl.Fun                             fun fib ... ; }
      [0]_.Lox.Decl.Function                      fib ( ... ; }
        [0]_.Lox.Decl.Function.Parameters         n
          [0]_.Lox.Decl.Function.Parameter        n
        [1]_.Lox.Stmt.Block                       { if ... ; }
          [0]_.Lox.Stmt                           if ( ... n ;
            [0]_.Lox.Stmt.If                      if ( ... n ;
              [0]_.Lox.Expr.Comparison.<=         n <= 1
                [0]_.Lox.Expr.Atom                n
                [1]_.Lox.Expr.Atom                1
              [1]_.Lox.Stmt                       return n ;
                [0]_.Lox.Stmt.Return              return n ;
                  [0]_.Lox.Expr.Atom              n
          [1]_.Lox.Stmt                           return fib ... ) ;
            [0]_.Lox.Stmt.Return                  return fib ... ) ;
              [0]_.Lox.Expr.Term.+                fib ( ... 1 )
                [0]_.Lox.Expr.Call.(              fib ( ... 2 )
                  [0]_.Lox.Expr.Atom              fib
                  [1]_.Lox.Expr.Arguments         n - 2
                    [0]_.Lox.Expr.Term.-          n - 2
                      [0]_.Lox.Expr.Atom          n
                      [1]_.Lox.Expr.Atom          2
                [1]_.Lox.Expr.Call.(              fib ( ... 1 )
                  [0]_.Lox.Expr.Atom              fib
                  [1]_.Lox.Expr.Arguments         n - 1
                    [0]_.Lox.Expr.Term.-          n - 1
                      [0]_.Lox.Expr.Atom          n
                      [1]_.Lox.Expr.Atom          1
  [8]_.Lox.Stmt                                   print 'Fibonacci ==' ;
    [0]_.Lox.Stmt.Print                           print 'Fibonacci ==' ;
      [0]_.Lox.Expr.Atom                          'Fibonacci =='
  [9]_.Lox.Stmt                                   for ( ... ; }
    [0]_.Lox.Stmt.For                             for ( ... ; }
      [0]_.Lox.Decl.Var                           var i = 0 ;
        [0]_.Lox.Expr.Atom                        0
      [1]_.Lox.Expr.Comparison.<                  i < 10
        [0]_.Lox.Expr.Atom                        i
        [1]_.Lox.Expr.Atom                        10
      [2]_.Lox.Expr.Assign.=                      i = i + 1
        [0]_.Lox.Expr.Atom                        i
        [1]_.Lox.Expr.Term.+                      i + 1
          [0]_.Lox.Expr.Atom                      i
          [1]_.Lox.Expr.Atom                      1
      [3]_.Lox.Stmt                               { print ... ; }
        [0]_.Lox.Stmt.Block                       { print ... ; }
          [0]_.Lox.Stmt                           print fib ... ) ;
            [0]_.Lox.Stmt.Print                   print fib ... ) ;
              [0]_.Lox.Expr.Call.(                fib ( i )
                [0]_.Lox.Expr.Atom                fib
                [1]_.Lox.Expr.Arguments           i
                  [0]_.Lox.Expr.Atom              i
  [10]_.Lox.Stmt                                  print 'Fibonacci ==' ;
    [0]_.Lox.Stmt.Print                           print 'Fibonacci ==' ;
      [0]_.Lox.Expr.Atom                          'Fibonacci =='
  [11]_.Lox.Decl                                  fun makeCounter ... ; }
    [0]_.Lox.Decl.Fun                             fun makeCounter ... ; }
      [0]_.Lox.Decl.Function                      makeCounter ( ... ; }
        [0]_.Lox.Decl.Function.Parameters         
        [1]_.Lox.Stmt.Block                       { var ... ; }
          [0]_.Lox.Decl                           var i = 0 ;
            [0]_.Lox.Decl.Var                     var i = 0 ;
              [0]_.Lox.Expr.Atom                  0
          [1]_.Lox.Decl                           fun count ... ; }
            [0]_.Lox.Decl.Fun                     fun count ... ; }
              [0]_.Lox.Decl.Function              count ( ... ; }
                [0]_.Lox.Decl.Function.Parameters 
                [1]_.Lox.Stmt.Block               { i ... ; }
                  [0]_.Lox.Stmt                   i = ... 1 ;
                    [0]_.Lox.Stmt.ExprStmt        i = ... 1 ;
                      [0]_.Lox.Expr.Assign.=      i = i + 1
                        [0]_.Lox.Expr.Atom        i
                        [1]_.Lox.Expr.Term.+      i + 1
                          [0]_.Lox.Expr.Atom      i
                          [1]_.Lox.Expr.Atom      1
                  [1]_.Lox.Stmt                   print i ;
                    [0]_.Lox.Stmt.Print           print i ;
                      [0]_.Lox.Expr.Atom          i
          [2]_.Lox.Stmt                           return count ;
            [0]_.Lox.Stmt.Return                  return count ;
              [0]_.Lox.Expr.Atom                  count
  [12]_.Lox.Decl                                  var counter ... ) ;
    [0]_.Lox.Decl.Var                             var counter ... ) ;
      [0]_.Lox.Expr.Call.(                        makeCounter ( )
        [0]_.Lox.Expr.Atom                        makeCounter
        [1]_.Lox.Expr.Arguments                   
  [13]_.Lox.Stmt                                  counter ( ) ;
    [0]_.Lox.Stmt.ExprStmt                        counter ( ) ;
      [0]_.Lox.Expr.Call.(                        counter ( )
        [0]_.Lox.Expr.Atom                        counter
        [1]_.Lox.Expr.Arguments                   
  [14]_.Lox.Stmt                                  counter ( ) ;
    [0]_.Lox.Stmt.ExprStmt                        counter ( ) ;
      [0]_.Lox.Expr.Call.(                        counter ( )
        [0]_.Lox.Expr.Atom                        counter
        [1]_.Lox.Expr.Arguments                   
  [15]_.Lox.Stmt                                  counter ( ) ;
    [0]_.Lox.Stmt.ExprStmt                        counter ( ) ;
      [0]_.Lox.Expr.Call.(                        counter ( )
        [0]_.Lox.Expr.Atom                        counter
        [1]_.Lox.Expr.Arguments                   
  [16]_.Lox.Decl                                  var a ;
    [0]_.Lox.Decl.Var                             var a ;
  [17]_.Lox.Stmt                                  a = 'global' ;
    [0]_.Lox.Stmt.ExprStmt                        a = 'global' ;
      [0]_.Lox.Expr.Assign.=                      a = 'global'
        [0]_.Lox.Expr.Atom                        a
        [1]_.Lox.Expr.Atom                        'global'
  [18]_.Lox.Stmt                                  { fun ... ; }
    [0]_.Lox.Stmt.Block                           { fun ... ; }
      [0]_.Lox.Decl                               fun showA ... ; }
        [0]_.Lox.Decl.Fun                         fun showA ... ; }
          [0]_.Lox.Decl.Function                  showA ( ... ; }
            [0]_.Lox.Decl.Function.Parameters     
            [1]_.Lox.Stmt.Block                   { print a ; }
              [0]_.Lox.Stmt                       print a ;
                [0]_.Lox.Stmt.Print               print a ;
                  [0]_.Lox.Expr.Atom              a
      [1]_.Lox.Stmt                               showA ( ) ;
        [0]_.Lox.Stmt.ExprStmt                    showA ( ) ;
          [0]_.Lox.Expr.Call.(                    showA ( )
            [0]_.Lox.Expr.Atom                    showA
            [1]_.Lox.Expr.Arguments               
      [2]_.Lox.Decl                               var a = 'block' ;
        [0]_.Lox.Decl.Var                         var a = 'block' ;
          [0]_.Lox.Expr.Atom                      'block'
      [3]_.Lox.Stmt                               showA ( ) ;
        [0]_.Lox.Stmt.ExprStmt                    showA ( ) ;
          [0]_.Lox.Expr.Call.(                    showA ( )
            [0]_.Lox.Expr.Atom                    showA
            [1]_.Lox.Expr.Arguments               
      [4]_.Lox.Stmt                               print a ;
        [0]_.Lox.Stmt.Print                       print a ;
          [0]_.Lox.Expr.Atom                      a
  [19]_.Lox.Decl                                  class Person ... } }
    [0]_.Lox.Decl.Class                           class Person ... } }
      [0]_.Lox.Decl.Class.Super                   
      [1]_.Lox.Decl.Function                      sayName ( ... ; }
        [0]_.Lox.Decl.Function.Parameters         
        [1]_.Lox.Stmt.Block                       { print ... ; }
          [0]_.Lox.Stmt                           print 'Mr ' ... name ;
            [0]_.Lox.Stmt.Print                   print 'Mr ' ... name ;
              [0]_.Lox.Expr.Term.+                'Mr ' + this . name
                [0]_.Lox.Expr.Atom                'Mr '
                [1]_.Lox.Expr.Call..              this . name
                  [0]_.Lox.Expr.Atom              this
                  [1]_.Lox.Expr.Atom              name
  [20]_.Lox.Stmt                                  print Person ;
    [0]_.Lox.Stmt.Print                           print Person ;
      [0]_.Lox.Expr.Atom                          Person
  [21]_.Lox.Decl                                  var jane ... ) ;
    [0]_.Lox.Decl.Var                             var jane ... ) ;
      [0]_.Lox.Expr.Call.(                        Person ( )
        [0]_.Lox.Expr.Atom                        Person
        [1]_.Lox.Expr.Arguments                   
  [22]_.Lox.Stmt                                  print jane ;
    [0]_.Lox.Stmt.Print                           print jane ;
      [0]_.Lox.Expr.Atom                          jane
  [23]_.Lox.Stmt                                  jane . ... 'Jane' ;
    [0]_.Lox.Stmt.ExprStmt                        jane . ... 'Jane' ;
      [0]_.Lox.Expr.Assign.=                      jane . name = 'Jane'
        [0]_.Lox.Expr.Call..                      jane . name
          [0]_.Lox.Expr.Atom                      jane
          [1]_.Lox.Expr.Atom                      name
        [1]_.Lox.Expr.Atom                        'Jane'
  [24]_.Lox.Decl                                  var method ... sayName ;
    [0]_.Lox.Decl.Var                             var method ... sayName ;
      [0]_.Lox.Expr.Call..                        jane . sayName
        [0]_.Lox.Expr.Atom                        jane
        [1]_.Lox.Expr.Atom                        sayName
  [25]_.Lox.Stmt                                  method ( ) ;
    [0]_.Lox.Stmt.ExprStmt                        method ( ) ;
      [0]_.Lox.Expr.Call.(                        method ( )
        [0]_.Lox.Expr.Atom                        method
        [1]_.Lox.Expr.Arguments                   
  [26]_.Lox.Decl                                  class Thing ... } }
    [0]_.Lox.Decl.Class                           class Thing ... } }
      [0]_.Lox.Decl.Class.Super                   
      [1]_.Lox.Decl.Function                      init ( ... ; }
        [0]_.Lox.Decl.Function.Parameters         
        [1]_.Lox.Stmt.Block                       { print ... ; }
          [0]_.Lox.Stmt                           print 'init()' ;
            [0]_.Lox.Stmt.Print                   print 'init()' ;
              [0]_.Lox.Expr.Atom                  'init()'
          [1]_.Lox.Stmt                           this . ... 'start' ;
            [0]_.Lox.Stmt.ExprStmt                this . ... 'start' ;
              [0]_.Lox.Expr.Assign.=              this . mode = 'start'
                [0]_.Lox.Expr.Call..              this . mode
                  [0]_.Lox.Expr.Atom              this
                  [1]_.Lox.Expr.Atom              mode
                [1]_.Lox.Expr.Atom                'start'
      [2]_.Lox.Decl.Function                      getCallback ( ... ; }
        [0]_.Lox.Decl.Function.Parameters         
        [1]_.Lox.Stmt.Block                       { fun ... ; }
          [0]_.Lox.Decl                           fun localFunction ... ; }
            [0]_.Lox.Decl.Fun                     fun localFunction ... ; }
              [0]_.Lox.Decl.Function              localFunction ( ... ; }
                [0]_.Lox.Decl.Function.Parameters 
                [1]_.Lox.Stmt.Block               { print ... ; }
                  [0]_.Lox.Stmt                   print this . mode ;
                    [0]_.Lox.Stmt.Print           print this . mode ;
                      [0]_.Lox.Expr.Call..        this . mode
                        [0]_.Lox.Expr.Atom        this
                        [1]_.Lox.Expr.Atom        mode
          [1]_.Lox.Stmt                           return localFunction ;
            [0]_.Lox.Stmt.Return                  return localFunction ;
              [0]_.Lox.Expr.Atom                  localFunction
  [27]_.Lox.Decl                                  var callback ... ) ;
    [0]_.Lox.Decl.Var                             var callback ... ) ;
      [0]_.Lox.Expr.Call.(                        Thing ( ... ( )
        [0]_.Lox.Expr.Call..                      Thing ( ) . getCallback
          [0]_.Lox.Expr.Call.(                    Thing ( )
            [0]_.Lox.Expr.Atom                    Thing
            [1]_.Lox.Expr.Arguments               
          [1]_.Lox.Expr.Atom                      getCallback
        [1]_.Lox.Expr.Arguments                   
  [28]_.Lox.Stmt                                  callback ( ) ;
    [0]_.Lox.Stmt.ExprStmt                        callback ( ) ;
      [0]_.Lox.Expr.Call.(                        callback ( )
        [0]_.Lox.Expr.Atom                        callback
        [1]_.Lox.Expr.Arguments                   
  [29]_.Lox.Stmt                                  print chr ... ) ;
    [0]_.Lox.Stmt.Print                           print chr ... ) ;
      [0]_.Lox.Expr.Call.(                        chr ( 81 )
        [0]_.Lox.Expr.Atom                        chr
        [1]_.Lox.Expr.Arguments                   81
          [0]_.Lox.Expr.Atom                      81
  [30]_.Lox.Decl                                  fun foo ... ; }
    [0]_.Lox.Decl.Fun                             fun foo ... ; }
      [0]_.Lox.Decl.Function                      foo ( ... ; }
        [0]_.Lox.Decl.Function.Parameters         x
          [0]_.Lox.Decl.Function.Parameter        x
        [1]_.Lox.Stmt.Block                       { var ... ; }
          [0]_.Lox.Decl                           var a = x ;
            [0]_.Lox.Decl.Var                     var a = x ;
              [0]_.Lox.Expr.Atom                  x
          [1]_.Lox.Stmt                           x = 123 ;
            [0]_.Lox.Stmt.ExprStmt                x = 123 ;
              [0]_.Lox.Expr.Assign.=              x = 123
                [0]_.Lox.Expr.Atom                x
                [1]_.Lox.Expr.Atom                123
          [2]_.Lox.Stmt                           return a ;
            [0]_.Lox.Stmt.Return                  return a ;
              [0]_.Lox.Expr.Atom                  a
  [31]_.Lox.Decl                                  var outer = 42 ;
    [0]_.Lox.Decl.Var                             var outer = 42 ;
      [0]_.Lox.Expr.Atom                          42
  [32]_.Lox.Stmt                                  print foo ... ) ;
    [0]_.Lox.Stmt.Print                           print foo ... ) ;
      [0]_.Lox.Expr.Call.(                        foo ( outer )
        [0]_.Lox.Expr.Atom                        foo
        [1]_.Lox.Expr.Arguments                   outer
          [0]_.Lox.Expr.Atom                      outer
  [33]_.Lox.Stmt                                  print outer ;
    [0]_.Lox.Stmt.Print                           print outer ;
      [0]_.Lox.Expr.Atom                          outer

Hello, World!
3
142
<function [example.lox:7:5] parse_tree_span[ sayHi ( ... ; } ]>
Hi, Dear Reader!
Fibonacci ==
0
1
1
2
3
5
8
13
21
34
Fibonacci ==
1
2
3
global
global
block
<class [example.lox:49:1] parse_tree_span[ class Person ... } } ]>
<instance of <class [example.lox:49:1] parse_tree_span[ class Person ... } } ]>>
Mr Jane
init()
start
none
123
123
object_pool_t with 29 objects
  - 1 lox_v[<builtin-function 'clock'>]
  - 1 lox_v[<builtin-function 'getc'>]
  - 1 lox_v[<builtin-function 'chr'>]
  - 1 lox_v[<builtin-function 'exit'>]
  - 1 lox_v[<builtin-function 'print_error'>]
  - 1 lox_v[10]
  - 1 lox_v[<function [example.lox:7:5] parse_tree_span[ sayHi ( ... ; } ]>]
  - 1 lox_v[142]
  - 1 lox_v[<function [example.lox:13:5] parse_tree_span[ fib ( ... ; } ]>]
  - 1 lox_v[<function [example.lox:66:3] parse_tree_span[ getCallback ( ... ; } ]>]
  - 1 lox_v[Jane]
  - 2 lox_v[<class [example.lox:61:1] parse_tree_span[ class Thing ... } } ]>]
  - 1 lox_v[<function [example.lox:78:5] parse_tree_span[ foo ( ... ; } ]>]
  - 1 lox_v[3]
  - 2 lox_v[<class [example.lox:49:1] parse_tree_span[ class Person ... } } ]>]
  - 1 lox_v[<function [example.lox:50:3] parse_tree_span[ sayName ( ... ; } ]>]
  - 1 lox_v[<function [example.lox:39:7] parse_tree_span[ showA ( ... ; } ]>]
  - 1 lox_v[<function [example.lox:62:3] parse_tree_span[ init ( ... ; } ]>]
  - 1 lox_v[global]
  - 2 lox_v[<function [example.lox:25:7] parse_tree_span[ count ( ... ; } ]>]
  - 1 lox_v[block]
  - 1 lox_v[<function [example.lox:23:5] parse_tree_span[ makeCounter ( ... ; } ]>]
  - tombstone
  - 2 lox_v[<instance of <class [example.lox:49:1] parse_tree_span[ class Person ... } } ]>>]
  - 1 lox_v[start]
  - 1 lox_v[<function [example.lox:50:3] parse_tree_span[ sayName ( ... ; } ]>]
  - 1 lox_v[123]
  - 1 lox_v[<instance of <class [example.lox:61:1] parse_tree_span[ class Thing ... } } ]>>]
  - 2 lox_v[<function [example.lox:67:9] parse_tree_span[ localFunction ( ... ; } ]>]

